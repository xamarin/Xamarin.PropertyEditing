<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:local="clr-namespace:Xamarin.PropertyEditing.Windows"
					xmlns:drawing="clr-namespace:Xamarin.PropertyEditing.Drawing;assembly=Xamarin.PropertyEditing"
					xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
					xmlns:prop="clr-namespace:Xamarin.PropertyEditing.Properties;assembly=Xamarin.PropertyEditing"
					xmlns:system="clr-namespace:System;assembly=mscorlib"
					xmlns:vm="clr-namespace:Xamarin.PropertyEditing.ViewModels;assembly=Xamarin.PropertyEditing"
					xmlns:pe="clr-namespace:Xamarin.PropertyEditing;assembly=Xamarin.PropertyEditing"
					xmlns:common="clr-namespace:Xamarin.PropertyEditing.Common;assembly=Xamarin.PropertyEditing">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="MenuButtonStyle.xaml" />
        <ResourceDictionary Source="PropertyEditorPanelStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

	<Color x:Key="DropShadowBackgroundColor">#72000000</Color>
	<SolidColorBrush x:Key="LiteralMarkerBrush">#55000000</SolidColorBrush>
	<SolidColorBrush x:Key="ResourceMarkerBrush">#FF8BD44A</SolidColorBrush>
	<SolidColorBrush x:Key="BindingMarkerBrush">#FFFFCF00</SolidColorBrush>

	<Style x:Key="GenericVisualFocusStyle" TargetType="Control">
		<Setter Property="Margin" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource FocusVisualBorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Control">
					<Rectangle Margin="{TemplateBinding Margin}" SnapsToDevicePixels="True" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="BrushBoxCheckerBoardLight">#FFFFFF</SolidColorBrush>
	<SolidColorBrush x:Key="BrushBoxCheckerBoardDark">#D3D3D3</SolidColorBrush>

	<DrawingBrush x:Key="CheckerBoard" Stretch="None" TileMode="Tile" Viewport="0,0,20,20" ViewportUnits="Absolute">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Geometry="M0,0 L20,0 20,20, 0,20Z" Brush="{DynamicResource BrushBoxCheckerBoardLight}"/>
				<GeometryDrawing Geometry="M0,10 L20,10 20,20, 10,20 10,0 0,0Z" Brush="{DynamicResource BrushBoxCheckerBoardDark}"/>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<local:BoolsToVisibilityConverter x:Key="BoolsToVisibilityConverter" />
	<local:CommonBrushToBrushConverter x:Key="BrushConverter" />
	<local:CommonColorToColorConverter x:Key="ColorConverter" />
	<local:NegativeThicknessConverter x:Key="NegativeThicknessConverter" />
	<local:GroupedEditorPropertySelector x:Key="GroupedEditorSelector" />
	<local:MultiplierConverter x:Key="MultiplierConverter" />
	<local:DateToTextConverter x:Key="DateToTextConverter" />
	<local:TimeToTextConverter x:Key="TimeToTextConverter" />

	<Style TargetType="local:CombinablePredefinedValuesEditor">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:CombinablePredefinedValuesEditor">
					<ItemsControl Focusable="{TemplateBinding Focusable}" ItemsSource="{Binding Choices,Mode=OneTime}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<CheckBox Foreground="{DynamicResource ListItemForegroundBrush}" FocusVisualStyle="{StaticResource GenericVisualFocusStyle}" IsChecked="{Binding IsFlagged,Mode=TwoWay}" Margin="0,1,0,1" MinHeight="18" VerticalContentAlignment="Center" Content="{Binding Name,Mode=OneTime}" />
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:EnumEditorControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:EnumEditorControl}">
					<local:ComboBoxEx x:Name="ComboBox" ItemsSource="{Binding PossibleValues,Mode=OneTime}" IsEditable="{Binding IsConstrainedToPredefined,Mode=OneTime,Converter={StaticResource OppositeBoolConverter}}" Text="{Binding ValueName,Mode=TwoWay,UpdateSourceTrigger=Explicit}" VerticalContentAlignment="Center" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:Spinner}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:Spinner">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<TextBlock Name="display"  Grid.Column="0" />
						<StackPanel Grid.Column="1" Orientation="Vertical" Margin="4,0,4,0">
							<RepeatButton Name="up" Style="{DynamicResource SpinnerButton}">
								<Geometry>M0,5L9,5 9,4 8,4 8,3 7,3 7,2 6,2 6,1 5,1 5,0 4,0 4,1 3,1 3,2 2,2 2,3 1,3 1,4 0,4z</Geometry>
							</RepeatButton>
							<RepeatButton Name="down" Style="{DynamicResource SpinnerButton}">
								<Geometry>M0,0L9,0 9,1 8,1 8,2 8,2 7,2 7,3 6,3 6,4 5,4 5,5 4,5 4,4 3,4 3,3 2,3 2,2 1,2 1,1 0,1z</Geometry>
							</RepeatButton>
						</StackPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<DataTemplate x:Key="GroupedPropertyValuePreview">
		<DataTemplate.Resources>
			<DataTemplate DataType="{x:Type drawing:CommonColor}">
				<local:BrushBoxControl BorderThickness="1" BorderBrush="{DynamicResource ControlBorderBrush}">
					<local:BrushBoxControl.Brush>
						<SolidColorBrush Color="{Binding Converter={StaticResource ColorConverter}}" />
					</local:BrushBoxControl.Brush>
				</local:BrushBoxControl>
			</DataTemplate>
			<DataTemplate DataType="{x:Type drawing:CommonBrush}">
				<local:BrushBoxControl Brush="{Binding Converter={StaticResource BrushConverter}}" BorderThickness="1" BorderBrush="{DynamicResource ControlBorderBrush}" />
			</DataTemplate>
		</DataTemplate.Resources>
		<ContentPresenter MinWidth="40" Content="{Binding Value}" />
	</DataTemplate>

	<Style x:Key="GroupSelectionItem" TargetType="RadioButton">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="20,2,4,2" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
						<ContentPresenter />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource ListItemMouseOverBackgroundBrush}" />
							<Setter Property="BorderBrush" Value="{DynamicResource ListItemMouseOverBorderBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource ListItemMouseOverForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" Value="{DynamicResource ListItemSelectedBackgroundBrush}" />
							<Setter Property="BorderBrush" Value="{DynamicResource ListItemSelectedBorderBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource ListItemSelectedForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type local:GroupEditorControl}">
		<Setter Property="Margin" Value="-19,0,0,0" />
		<Setter Property="SelectorStyle">
			<Setter.Value>
				<Style TargetType="Border">
					<Setter Property="BorderBrush" Value="{DynamicResource ListBackgroundBrush}" />
					<Setter Property="Background" Value="{DynamicResource ListBackgroundBrush}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsSource" Value="{Binding Properties}" />
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate DataType="vm:PropertyViewModel">
					<RadioButton GroupName="GroupSelection" Style="{StaticResource GroupSelectionItem}" Content="{Binding}">
						<RadioButton.ContentTemplate>
							<DataTemplate>
								<local:PropertyPresenter Label="{Binding Name,Mode=OneTime}" Background="Transparent" Content="{Binding Mode=OneTime}" ContentTemplate="{StaticResource GroupedPropertyValuePreview}" />
							</DataTemplate>
						</RadioButton.ContentTemplate>
					</RadioButton>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplateSelector" Value="{StaticResource GroupedEditorSelector}" />
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="ContentPresenter">
					<Setter Property="Width" Value="{Binding ActualWidth,RelativeSource={RelativeSource AncestorType=ItemsPresenter}}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:GroupEditorControl">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<Border Style="{TemplateBinding SelectorStyle}" Grid.Row="0">
							<ItemsPresenter Grid.IsSharedSizeScope="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" />
						</Border>
						<ContentPresenter Grid.Row="1" Name="EditorPresenter" IsEnabled="{Binding Property.CanWrite}" Content="{TemplateBinding SelectedItem}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ChoiceControlItem" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="RadioButton">
		<Setter Property="Background" Value="{DynamicResource ToggleItemBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ToggleItemBorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource ToggleItemForegroundBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="4,2,4,2" />
		<Setter Property="Margin" Value="1,0,0,0" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource GenericVisualFocusStyle}" />
		<Setter Property="ToolTip" Value="{Binding Tooltip}" />
		<Setter Property="AutomationProperties.Name" Value="{Binding Name}" />
		<Setter Property="AutomationProperties.HelpText" Value="{Binding Tooltip}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource ToggleItemSelectedBorderBrush}" />
				<Setter Property="Background" Value="{DynamicResource ToggleItemSelectedBackgroundBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ToggleItemSelectedForegroundBrush}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ToggleItemMouseOverForegroundBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="Background" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource ToggleItemPressedBorderBrush}" />
				<Setter Property="Background" Value="{DynamicResource ToggleItemPressedBackgroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="PanelChoiceItem" BasedOn="{StaticResource ChoiceControlItem}" TargetType="RadioButton">
		<Setter Property="Padding" Value="1" />
		<Setter Property="Width" Value="22" />
	</Style>

	<Style TargetType="{x:Type local:ChoiceControl}">
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="0,1,1,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource ToggleItemOuterBorderBrush}" />
		<Setter Property="Background" Value="{DynamicResource ToggleItemOuterBorderBrush}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="SelectedValuePath" Value="Value" />
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<RadioButton Style="{DynamicResource ChoiceControlItem}" GroupName="{Binding Name,RelativeSource={RelativeSource FindAncestor,AncestorType=local:ChoiceControl},Mode=OneTime}">
						<Image Height="16" Width="16" Margin="-1" />
					</RadioButton>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Horizontal" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PanelChoice" BasedOn="{StaticResource {x:Type local:ChoiceControl}}" TargetType="local:ChoiceControl">
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<RadioButton Style="{DynamicResource PanelChoiceItem}" GroupName="{Binding Name,RelativeSource={RelativeSource FindAncestor,AncestorType=local:ChoiceControl},Mode=OneTime}">
						<Image Height="16" Width="16" Margin="-1" />
					</RadioButton>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:StringEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:StringEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<local:TextBoxEx x:Name="TextBox" Grid.Column="0" FocusSelectsAll="True" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" Text="{Binding Value,UpdateSourceTrigger=Explicit}" VerticalContentAlignment="Center" IsEnabled="{Binding IsInputEnabled}" />
						<local:ComboBoxEx Grid.Column="1" Visibility="{Binding HasInputModes,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" EnableSubmit="False" ItemsSource="{Binding InputModes,Mode=OneTime}" SelectedItem="{Binding InputMode,Mode=TwoWay}" DisplayMemberPath="Identifier">
							<local:ComboBoxEx.ItemContainerStyle>
								<Style TargetType="ComboBoxItem">
									<Setter Property="AutomationProperties.Name" Value="{Binding Identifier,Mode=OneTime}" />
								</Style>
							</local:ComboBoxEx.ItemContainerStyle>
						</local:ComboBoxEx>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:DateEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:DateEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<local:TextBoxEx x:Name="TextBox" Grid.Column="0" FocusSelectsAll="True" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" Text="{Binding Value,UpdateSourceTrigger=Explicit,Converter={StaticResource DateToTextConverter}}" VerticalContentAlignment="Center" IsEnabled="{Binding IsInputEnabled}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:TimeEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:TimeEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<local:TextBoxEx x:Name="TextBox" Grid.Column="0" FocusSelectsAll="True" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" Text="{Binding Value,UpdateSourceTrigger=Explicit,Converter={StaticResource TimeToTextConverter}}" VerticalContentAlignment="Center" IsEnabled="{Binding IsInputEnabled}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:BoolEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:BoolEditorControl">
					<CheckBox Name="CheckBox" Height="{TemplateBinding Height}" FocusVisualStyle="{DynamicResource EmptyCheckBoxFocusVisualSquare}" VerticalContentAlignment="Center" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" IsChecked="{Binding Value}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style TargetType="local:PointEditorControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:PointEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Grid.Column="0" Name="XLabel" Text="X" Margin="0,0,5,0" />
						<local:DoubleUpDownControl Grid.Column="1" x:Name="XTextBox" Value="{Binding X}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" AutomationProperties.LabeledBy="{Binding ElementName=XLabel,Mode=OneTime}"/>
						<TextBlock Grid.Column="2" Name="YLabel" Text="Y" Margin="5,0,5,0" />
						<local:DoubleUpDownControl Grid.Column="3" x:Name="YTextBox" Value="{Binding Y}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" AutomationProperties.LabeledBy="{Binding ElementName=YLabel,Mode=OneTime}" />
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<Style TargetType="local:SizeEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:SizeEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Grid.Column="0" Name="WidthLabel" Text="Width" Margin="0,0,5,0" />
						<local:DoubleUpDownControl x:Name="WidthTextBox" Grid.Column="1" Value="{Binding Width}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" AutomationProperties.LabeledBy="{Binding ElementName=WidthLabel,Mode=OneTime}" />
						<TextBlock Name="HeightLabel" Grid.Column="2" Text="Height" Margin="5,0,5,0" />
						<local:DoubleUpDownControl x:Name="HeightTextBox" Grid.Column="3" Value="{Binding Height}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" AutomationProperties.LabeledBy="{Binding ElementName=HeightLabel,Mode=OneTime}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:RatioEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:RatioEditorControl">
					<local:TextBoxEx x:Name="RatioTextBox" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" Text="{Binding ValueString}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" VerticalContentAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="EditorIconLabelHost" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource ThicknessIconBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ThicknessIconBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Width" Value="20" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="HorizontalAlignment" Value="Left" />
	</Style>

	<Style x:Key="ThicknessIconStyle" TargetType="Path">
		<Setter Property="Stroke" Value="{DynamicResource InputForegroundBrush}" />
		<Setter Property="Fill" Value="{DynamicResource InputForegroundBrush}" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>
	
	<Style TargetType="local:ThicknessEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ThicknessEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<!-- We want to mimick a regular row with our first row, but we're already inset 0,2,0,2 from the parent !-->
							<RowDefinition MinHeight="22" />
							<RowDefinition MinHeight="22" />
						</Grid.RowDefinitions>

						<Border Grid.Column="0" Grid.Row="0" Style="{StaticResource EditorIconLabelHost}" Margin="0,0,0,2">
							<Path Style="{StaticResource ThicknessIconStyle}" Data="{DynamicResource LeftThicknessGeometry}" />
						</Border>
						<local:IntegerUpDownControl Grid.Column="0" Grid.Row="0" Margin="14,0,2,2" Value="{Binding Left}" IsEnabled="{TemplateBinding IsEnabled}" AutomationProperties.Name="Left" />
						<Border Grid.Column="1" Grid.Row="0" Style="{StaticResource EditorIconLabelHost}" Margin="0,0,0,2">
							<Path Style="{StaticResource ThicknessIconStyle}" Data="{DynamicResource RightThicknessGeometry}" />
						</Border>
						<local:IntegerUpDownControl Grid.Column="1" Grid.Row="0" Margin="14,0,2,2" Value="{Binding Right}" IsEnabled="{TemplateBinding IsEnabled}" AutomationProperties.Name="Right" />
						<Border Grid.Column="0" Grid.Row="1" Style="{StaticResource EditorIconLabelHost}" Margin="0,2,2,0">
							<Path Style="{StaticResource ThicknessIconStyle}" Data="{DynamicResource TopThicknessGeometry}" />
						</Border>
						<local:IntegerUpDownControl Grid.Column="0" Grid.Row="1" Margin="14,2,2,0" Value="{Binding Top}" IsEnabled="{TemplateBinding IsEnabled}" AutomationProperties.Name="Top" />
						<Border Grid.Column="1" Grid.Row="1" Style="{StaticResource EditorIconLabelHost}" Margin="0,2,0,0">
							<Path Style="{StaticResource ThicknessIconStyle}" Data="{DynamicResource BottomThicknessGeometry}" />
						</Border>
						<local:IntegerUpDownControl Grid.Column="1" Grid.Row="1" Margin="14,2,2,0" Value="{Binding Bottom}" IsEnabled="{TemplateBinding IsEnabled}" AutomationProperties.Name="Bottom" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:AutoResizingMaskEditorControl">
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:AutoResizingMaskEditorControl">
					<ControlTemplate.Resources>
						<Style x:Key="MarginButton" TargetType="ToggleButton">
							<Setter Property="BorderThickness" Value="0" />
							<Setter Property="Foreground" Value="{DynamicResource GuidelineEnabledForegroundBrush}" />
							<Setter Property="Background" Value="Transparent" />
							<Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
							<Setter Property="Padding" Value="0" />
							<Setter Property="VerticalAlignment" Value="Center" />
							<Setter Property="HorizontalAlignment" Value="Center" />
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="ToggleButton">
										<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
											<Polyline Stroke="{TemplateBinding Foreground}" Points="4,15 4,12 4,15 4,18 4,15 26,15 26,15 26,12 26,15 26,18 26,15" Height="30" Width="30" />
										</Border>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
							<Style.Triggers>
								<Trigger Property="IsChecked" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource GuidelineDisabledForegroundBrush}" />
								</Trigger>
							</Style.Triggers>
						</Style>
					</ControlTemplate.Resources>

					<Grid VerticalAlignment="Top" Height="100" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition />
						</Grid.ColumnDefinitions>

						<Border Grid.Row="0" Grid.Column="0" BorderBrush="{DynamicResource InputBorderBrush}" BorderThickness="1" Background="{DynamicResource InputBackgroundBrush}">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition Height="40" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="40" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<ToggleButton Style="{StaticResource MarginButton}" AutomationProperties.Name="{x:Static prop:Resources.AutoresizingLeftMarginName}" IsChecked="{Binding LeftMarginFixed,Mode=TwoWay}" Grid.Row="1" Grid.Column="0" />
								<ToggleButton Style="{StaticResource MarginButton}" AutomationProperties.Name="{x:Static prop:Resources.AutoresizingTopMarginName}" IsChecked="{Binding TopMarginFixed,Mode=TwoWay}" Grid.Row="0" Grid.Column="1">
									<ToggleButton.RenderTransform>
										<RotateTransform Angle="90" />
									</ToggleButton.RenderTransform>
								</ToggleButton>
								<ToggleButton Style="{StaticResource MarginButton}" AutomationProperties.Name="{x:Static prop:Resources.AutoresizingRightMarginName}" IsChecked="{Binding RightMarginFixed,Mode=TwoWay}" Grid.Row="1" Grid.Column="2" />
								<ToggleButton Style="{StaticResource MarginButton}" AutomationProperties.Name="{x:Static prop:Resources.AutoresizingBottomMarginName}" IsChecked="{Binding BottomMarginFixed,Mode=TwoWay}" Grid.Row="2" Grid.Column="1">
									<ToggleButton.RenderTransform>
										<RotateTransform Angle="90" />
									</ToggleButton.RenderTransform>
								</ToggleButton>

								<Button Name="sizingButton" Grid.Row="1" Grid.Column="1" Command="{Binding CycleSizingCommand,Mode=OneTime}" BorderThickness="1" BorderBrush="{DynamicResource GuidelineDisabledForegroundBrush}" Background="Transparent" Content="{Binding}" AutomationProperties.HelpText="{x:Static prop:Resources.AutoresizingSizingHelpText}">
									<Button.ContentTemplate>
										<DataTemplate DataType="vm:AutoResizingPropertyViewModel">
											<Grid>
												<Polyline Name="widthSizable" Stroke="{DynamicResource GuidelineEnabledForegroundBrush}" Points="0,15 0.2,14.8 0,15 0.2,15.2 0,15 30,15 30,15 29.8,14.8 30,15 29.8,15.2 30,15" Width="30" Height="30" SnapsToDevicePixels="True" />
												<Polyline Name="heightSizable" Stroke="{DynamicResource GuidelineEnabledForegroundBrush}" Points="15,0 14.8,0.2 15,0 15.2,0.2 15,0 15,30 15,30 14.8,29.8 15,30 15.2,29.8 15,30" Width="30" Height="30" SnapsToDevicePixels="True" />
											</Grid>
											<DataTemplate.Triggers>
												<DataTrigger Binding="{Binding HeightSizable}" Value="False">
													<Setter TargetName="heightSizable" Property="Stroke" Value="{DynamicResource GuidelineDisabledForegroundBrush}" />
												</DataTrigger>
												<DataTrigger Binding="{Binding WidthSizable}" Value="False">
													<Setter TargetName="widthSizable" Property="Stroke" Value="{DynamicResource GuidelineDisabledForegroundBrush}" />
												</DataTrigger>
											</DataTemplate.Triggers>
										</DataTemplate>
									</Button.ContentTemplate>
								</Button>
							</Grid>
						</Border>

						<Border Grid.Row="0" Grid.Column="1" BorderBrush="{DynamicResource InputBorderBrush}" BorderThickness="1" Background="{DynamicResource InputBackgroundBrush}" Margin="2,0,0,0">
							<Border Name="osBorder" Margin="2" Background="{DynamicResource ExampleWindowBackgroundBrush}" BorderThickness="0">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition />
									</Grid.RowDefinitions>

									<Border Grid.Row="0" BorderThickness="0" Background="{DynamicResource ExampleWindowTitleBackgroundBrush}" Height="4" />
									<Canvas Grid.Row="1" Margin="6,6,0,0">
										<Canvas.Resources>
											<Storyboard FillBehavior="Stop" RepeatBehavior="Forever" AutoReverse="True" Duration="0:0:0.5" x:Key="GrowStoryboard" Storyboard.TargetName="windowRect">
												<DoubleAnimation Storyboard.TargetProperty="Width" To="{Binding ElementName=osBorder,Path=ActualWidth}" />
												<DoubleAnimation Storyboard.TargetProperty="Height" To="{Binding ElementName=osBorder,Path=ActualHeight}" />
											</Storyboard>
										</Canvas.Resources>
										<Canvas.Triggers>
											<EventTrigger RoutedEvent="MouseEnter">
												<BeginStoryboard Storyboard="{StaticResource GrowStoryboard}" Name="BeginGrowStoryboard" />
											</EventTrigger>
											<EventTrigger RoutedEvent="MouseLeave">
												<RemoveStoryboard BeginStoryboardName="BeginGrowStoryboard" />
											</EventTrigger>
										</Canvas.Triggers>
										<Rectangle Name="windowRect" Fill="White" Width="30" Height="30" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" SnapsToDevicePixels="False" />
										<Rectangle Name="elementRect" Fill="Red" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" SnapsToDevicePixels="False" />
									</Canvas>
								</Grid>
							</Border>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:ObjectEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ObjectEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<TextBlock Text="{Binding ValueType.Name,StringFormat=({0})}" Grid.Column="0" VerticalAlignment="Center" />
						<Button AutomationProperties.Name="{Binding Property.Name,Mode=OneTime,StringFormat={x:Static prop:Resources.NewInstanceForProperty}}" MinHeight="20" MinWidth="40" Grid.Column="1" HorizontalAlignment="Right" Content="{x:Static prop:Resources.New}" Command="{Binding CreateInstanceCommand,Mode=OneTime}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:TypeEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:TypeEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<TextBlock Text="{Binding Value.Name,StringFormat=({0})}" Grid.Column="0" VerticalAlignment="Center" />
						<Button AutomationProperties.Name="{Binding Property.Name,Mode=OneTime,StringFormat={x:Static prop:Resources.SelectTypeForProperty}}" MinHeight="20" MinWidth="40" Grid.Column="1" HorizontalAlignment="Right" Content="{x:Static prop:Resources.Select}" Command="{Binding SelectTypeCommand,Mode=OneTime}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<system:Double x:Key="MenuOffset">3</system:Double>

	<Style x:Key="MarkerStyle" TargetType="Rectangle">
		<Setter Property="Width" Value="12" />
		<Setter Property="Height" Value="12" />
		<Setter Property="Stroke" Value="{DynamicResource PropertyButtonBorderBrush}" />
		<Setter Property="StrokeThickness" Value="1" />
	</Style>

	<Rectangle x:Shared="False" x:Key="LiteralMarker" Style="{StaticResource MarkerStyle}" Fill="{DynamicResource LiteralMarkerBrush}" />
	<Rectangle x:Shared="False" x:Key="ResourceMarker" Style="{StaticResource MarkerStyle}" Fill="{DynamicResource ResourceMarkerBrush}" />
	<Rectangle x:Shared="False" x:Key="BindingMarker" Style="{StaticResource MarkerStyle}" Fill="{DynamicResource BindingMarkerBrush}" />
	<Rectangle x:Shared="False" x:Key="SourceMarker" Style="{StaticResource MarkerStyle}" Fill="{Binding Foreground,RelativeSource={RelativeSource AncestorType=local:PropertyButton,Mode=FindAncestor}}" />

	<Style TargetType="local:PropertyButton">
		<Setter Property="Foreground" Value="Transparent" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Height" Value="17" />
		<Setter Property="Width" Value="11" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="MenuTemplate">
			<Setter.Value>
				<DataTemplate>
					<local:HeaderedContextMenu Header="{Binding Property.Name,Mode=OneTime}" StaysOpen="True" Placement="Left" HorizontalOffset="{StaticResource MenuOffset}" VerticalOffset="{StaticResource MenuOffset}" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}">
						<MenuItem x:Name="CustomExpressionItem" Header="{x:Static prop:Resources.CustomExpressionEllipsis}" Icon="{StaticResource LiteralMarker}" Visibility="{Binding TargetPlatform.SupportsCustomExpressions,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<Separator Visibility="{Binding TargetPlatform.SupportsCustomExpressions,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<MenuItem Header="{x:Static prop:Resources.Reset}" Icon="{StaticResource LiteralMarker}" Command="{Binding ClearValueCommand,Mode=OneTime}" />
						<MenuItem Header="{x:Static prop:Resources.ConvertToLocalValue}" Icon="{StaticResource LiteralMarker}" Command="{Binding ConvertToLocalValueCommand,Mode=OneTime}" />
						<Separator Visibility="{Binding SupportsResources,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<MenuItem Header="{x:Static prop:Resources.ResourceEllipsis}" Command="{Binding RequestResourceCommand,Mode=OneTime}" Icon="{StaticResource ResourceMarker}" Visibility="{Binding SupportsResources,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<MenuItem Header="{x:Static prop:Resources.ConvertToNewResourceEllipsis}" Command="{Binding RequestCreateResourceCommand}" Icon="{StaticResource ResourceMarker}" Visibility="{Binding CanCreateResources,Converter={StaticResource BoolToVisibilityConverter}}" />
						<Separator Visibility="{Binding SupportsBindings,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<MenuItem Header="{x:Static prop:Resources.CreateDataBindingMenuItem}" Command="{Binding RequestCreateBindingCommand,Mode=OneTime}" Icon="{StaticResource BindingMarker}" Visibility="{Binding SupportsBindings,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<!--<MenuItem Header="{x:Static prop:Resources.TemplateBinding}" />!-->
						<Separator Visibility="{Binding SupportsValueSourceNavigation,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
						<!--<MenuItem Header="{x:Static prop:Resources.RecordCurrentValue}" />!-->
						<MenuItem Header="{x:Static prop:Resources.GoToSource}" Command="{Binding NavigateToValueSourceCommand,Mode=OneTime}" Icon="{StaticResource SourceMarker}" Visibility="{Binding SupportsValueSourceNavigation,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" />
					</local:HeaderedContextMenu>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:PropertyButton">
					<Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<Rectangle Name="Indicator" Fill="{TemplateBinding Foreground}" Stroke="{DynamicResource PropertyButtonBorderBrush}" Height="7" Width="7" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.Setters>
					<Setter Property="Background" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}" />
				</Trigger.Setters>
			</Trigger>
			<Trigger Property="ValueSource" Value="Local">
				<Setter Property="Foreground" Value="{DynamicResource PropertyLocalValueBrush}" />
			</Trigger>
			<Trigger Property="ValueSource" Value="Binding">
				<Setter Property="Foreground" Value="{DynamicResource PropertyBoundValueBrush}" />
			</Trigger>
			<Trigger Property="ValueSource" Value="Inherited">
				<Setter Property="Foreground" Value="{DynamicResource PropertyResourceBrush}" />
			</Trigger>
			<Trigger Property="ValueSource" Value="DefaultStyle">
				<Setter Property="Foreground" Value="{DynamicResource PropertyResourceBrush}" />
			</Trigger>
			<Trigger Property="ValueSource" Value="Style">
				<Setter Property="Foreground" Value="{DynamicResource PropertyResourceBrush}" />
			</Trigger>
			<Trigger Property="ValueSource" Value="Resource">
				<Setter Property="Foreground" Value="{DynamicResource PropertyResourceBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="CustomExpressionPopup" TargetType="local:EntryPopup">
		<Setter Property="Placement" Value="Bottom" />
		<Setter Property="Width" Value="400" />
		<Setter Property="StaysOpen" Value="True" />
		<Setter Property="Value" Value="{Binding CustomExpression,Mode=TwoWay,UpdateSourceTrigger=Explicit}" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border BorderThickness="1" BorderBrush="{DynamicResource PopupBorderBrush}" Background="{DynamicResource PopupBackgroundBrush}" TextElement.Foreground="{DynamicResource PopupForegroundBrush}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>

							<TextBlock Name="label" Grid.Row="0" Margin="5,5,0,5" FontWeight="Bold" Text="{x:Static prop:Resources.CustomExpression}" />
							<local:TextBoxEx x:Name="entry" Grid.Row="1" Margin="5,0,5,5" AutomationProperties.LabeledBy="{Binding Mode=OneTime,ElementName=label}" FocusSelectsAll="True" EnableClear="False" EnableSubmit="False" Text="{Binding PreviewCustomExpression,Mode=OneWayToSource,UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding AutocompleteItems}" />
						</Grid>
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="LargeResourcePreview" TargetType="ContentPresenter">
		<Setter Property="ContentTemplateSelector">
			<Setter.Value>
				<local:PreviewTemplateSelector>
					<local:PreviewTemplateSelector.FallbackTemplate>
						<DataTemplate>
							<TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{x:Static prop:Resources.NoPreviewAvailable}" FontSize="16" />
						</DataTemplate>
					</local:PreviewTemplateSelector.FallbackTemplate>
					<local:PreviewTemplateSelector.Templates>
						<DataTemplate DataType="{x:Type drawing:CommonColor}">
							<local:BrushBoxControl BorderThickness="0">
								<local:BrushBoxControl.Brush>
									<SolidColorBrush Color="{Binding Converter={StaticResource ColorConverter}}" />
								</local:BrushBoxControl.Brush>
							</local:BrushBoxControl>
						</DataTemplate>
						<DataTemplate DataType="{x:Type drawing:CommonBrush}">
							<local:BrushBoxControl BorderThickness="0" Brush="{Binding Converter={StaticResource BrushConverter}}" />
						</DataTemplate>
						<DataTemplate DataType="{x:Type system:String}">
							<TextBlock Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{Binding Mode=OneTime}" />
						</DataTemplate>
					</local:PreviewTemplateSelector.Templates>
				</local:PreviewTemplateSelector>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ComplexResourcePreview" TargetType="ContentPresenter">
		<Style.Resources>
			<DataTemplate DataType="{x:Type drawing:CommonColor}">
				<StackPanel Orientation="Horizontal">
					<local:BrushBoxControl Margin="4" Height="14" Width="26" BorderBrush="{DynamicResource ControlBorderBrush}" BorderThickness="1">
						<local:BrushBoxControl.Brush>
							<SolidColorBrush Color="{Binding Converter={StaticResource ColorConverter}}" />
						</local:BrushBoxControl.Brush>
					</local:BrushBoxControl>

					<TextBlock Margin="4" VerticalAlignment="Center" Text="{Binding Mode=OneTime}" />
				</StackPanel>
			</DataTemplate>
			<DataTemplate DataType="{x:Type drawing:CommonSolidBrush}">
				<StackPanel Orientation="Horizontal">
					<local:BrushBoxControl Margin="4" Height="14" Width="26" Brush="{Binding Converter={StaticResource BrushConverter}}"  BorderBrush="{DynamicResource ControlBorderBrush}" BorderThickness="1" />
					<TextBlock Margin="4" Text="{Binding Color,Mode=OneTime}" VerticalAlignment="Center" />
				</StackPanel>
			</DataTemplate>
			<DataTemplate DataType="{x:Type drawing:CommonImageBrush}">
				<TextBlock Margin="4" Text="{Binding ImageSource,Mode=OneTime}" />
			</DataTemplate>
			<DataTemplate DataType="{x:Type system:String}">
				<TextBlock Margin="4" Text="{Binding Mode=OneTime}" />
			</DataTemplate>
		</Style.Resources>
	</Style>

	<DataTemplate x:Key="SimpleResourcePreviewItem">
		<DataTemplate.Resources>
			<DataTemplate DataType="{x:Type drawing:CommonColor}">
				<local:BrushBoxControl>
					<local:BrushBoxControl.Brush>
						<SolidColorBrush Color="{Binding Converter={StaticResource ColorConverter}}" />
					</local:BrushBoxControl.Brush>
				</local:BrushBoxControl>
			</DataTemplate>
			<DataTemplate DataType="{x:Type drawing:CommonBrush}">
				<local:BrushBoxControl Brush="{Binding Converter={StaticResource BrushConverter}}" />
			</DataTemplate>
		</DataTemplate.Resources>
		<StackPanel Orientation="Horizontal" Margin="4,2,4,2">
			<Border Margin="4,2,0,2" BorderThickness="1" BorderBrush="{DynamicResource ControlBorderBrush}">
				<ContentPresenter MinWidth="40" Content="{Binding Value,Mode=OneTime}" />
			</Border>
			<TextBlock VerticalAlignment="Center" Text="{Binding Name,Mode=OneTime}" Margin="4,0,0,0" />
		</StackPanel>
	</DataTemplate>

	<Style x:Key="BrushBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle StrokeThickness="1" Margin="0" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" SnapsToDevicePixels="true"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:BrushEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:BrushEditorControl">
					<Grid>
						<local:BrushBoxControl Brush="{Binding Value, Converter={local:CommonBrushToBrushConverter}}"
											   HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="0"
											   Height="24" BorderThickness="1" BorderBrush="{DynamicResource InputBorderBrush}"/>
						<ToggleButton x:Name="brushBoxButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="0" BorderThickness="0" Background="Transparent" Opacity="0"
									  IsEnabled="{TemplateBinding IsEnabled}" FocusVisualStyle="{StaticResource BrushBoxFocusVisual}"
									  IsHitTestVisible="{Binding ElementName=brushBoxPopup, Path=IsOpen, Mode=OneWay, Converter={StaticResource OppositeBoolConverter}}"
									  AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}"/>
						<Popup x:Name="brushBoxPopup" StaysOpen="False" MaxWidth="300" Width="300" PopupAnimation="Slide" AllowsTransparency="True"
							IsOpen="{Binding ElementName=brushBoxButton, Path=IsChecked}">
							<theme:SystemDropShadowChrome x:Name="shadow" Color="{DynamicResource DropShadowBackgroundColor}" Margin="0,0,5,5">
								<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}" BorderThickness="1" Background="{DynamicResource ComboBoxPopupBackgroundBrush}">
									<Grid>
										<Rectangle VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Column="0" Grid.Row="0"
											Fill="{DynamicResource MenuPopupBackgroundBrush}" Stroke="{DynamicResource MenuPopupBorderBrush}"/>
										<local:BrushTabbedEditorControl Grid.Column="0" Grid.Row="0" Focusable="False"/>
									</Grid>
								</Border>
							</theme:SystemDropShadowChrome>
						</Popup>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="BrushChoiceItem" TargetType="RadioButton" BasedOn="{StaticResource ChoiceControlItem}">
		<Setter Property="GroupName" Value="brushChoiceType" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="MinWidth" Value="20" />
		<Setter Property="ToolTip" Value="{Binding Key,Mode=OneTime}" />
		<Setter Property="AutomationProperties.Name" Value="{Binding Key,Mode=OneTime}" />
		<Setter Property="AutomationProperties.HelpText" Value="{Binding Key,Mode=OneTime}" />
	</Style>

	<local:BrushChoiceTemplateSelector x:Key="BrushChoiceTemplateSelector">
		<local:BrushChoiceTemplateSelector.NoBrushTemplate>
			<DataTemplate>
				<RadioButton Style="{DynamicResource BrushChoiceItem}">
					<ContentControl ContentTemplate="{DynamicResource BrushChoiceNoBrushIcon}" Focusable="False"/>
				</RadioButton>
			</DataTemplate>
		</local:BrushChoiceTemplateSelector.NoBrushTemplate>
		<local:BrushChoiceTemplateSelector.SolidBrushTemplate>
			<DataTemplate>
				<RadioButton Style="{DynamicResource BrushChoiceItem}">
					<ContentControl ContentTemplate="{DynamicResource BrushChoiceSolidBrushIcon}" Focusable="False"/>
				</RadioButton>
			</DataTemplate>
		</local:BrushChoiceTemplateSelector.SolidBrushTemplate>
		<local:BrushChoiceTemplateSelector.MaterialDesignBrushTemplate>
			<DataTemplate>
				<RadioButton Style="{DynamicResource BrushChoiceItem}">
					<ContentControl ContentTemplate="{DynamicResource BrushChoiceMaterialDesignIcon}" Focusable="False"/>
				</RadioButton>
			</DataTemplate>
		</local:BrushChoiceTemplateSelector.MaterialDesignBrushTemplate>
		<local:BrushChoiceTemplateSelector.ResourceBrushTemplate>
			<DataTemplate>
				<RadioButton Style="{DynamicResource BrushChoiceItem}">
					<ContentControl ContentTemplate="{DynamicResource BrushChoiceResourceBrushIcon}" Focusable="False"/>
				</RadioButton>
			</DataTemplate>
		</local:BrushChoiceTemplateSelector.ResourceBrushTemplate>
	</local:BrushChoiceTemplateSelector>

	<Style TargetType="local:BrushTabbedEditorControl">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:BrushTabbedEditorControl">
					<StackPanel>
						<Border Padding="8,10,8,4">
							<StackPanel>
								<local:ChoiceControl x:Name="brushChoice"
													 SelectedValue="{Binding SelectedBrushType,Mode=TwoWay}" SelectedValuePath="Value"
													 ItemsSource="{Binding BrushTypes,Mode=OneTime}"
													 ItemTemplateSelector="{StaticResource BrushChoiceTemplateSelector}"
													 ItemTemplate="{x:Null}" HorizontalAlignment="Stretch" />
								<local:SolidBrushEditorControl x:Name="solidBrushEditor" Visibility="Collapsed" />
								<local:ResourceBrushEditorControl x:Name="resourceBrushEditor" Visibility="Collapsed" />
								<local:MaterialDesignColorEditorControl x:Name="materialDesignColorEditor" Visibility="Collapsed" />
							</StackPanel>
						</Border>
						<Border Padding="1" Visibility="{Binding TargetPlatform.SupportsBrushOpacity, Mode=OneTime, Converter={StaticResource BoolToVisibilityConverter}}">
							<Expander Name="advancedPropertyPanel" Style="{DynamicResource AdvancedPropertiesExpander}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
								  Background="{DynamicResource PanelGroupSecondaryBackgroundBrush}" Foreground="{DynamicResource PanelForegroundBrush}">
								<Expander.Content>
									<Border Padding="19,6,6,6" Background="{DynamicResource PanelGroupSecondaryBackgroundBrush}">
										<local:PropertyPresenter Label="{x:Static prop:Resources.Opacity}" ShowPropertyButton="False">
											<local:ColorComponentBox
												Value="{Binding Path=Opacity, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
												ToolTip="{x:Static prop:Resources.Opacity}" AutomationProperties.Name="{x:Static prop:Resources.Opacity}" AutomationProperties.HelpText="{x:Static prop:Resources.Opacity}"
												HorizontalAlignment="Stretch" HorizontalContentAlignment="Left"/>
										</local:PropertyPresenter>
									</Border>
								</Expander.Content>
							</Expander>
						</Border>
					</StackPanel>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding SelectedBrushType}" Value="{x:Static drawing:CommonBrushType.Solid}">
							<Setter TargetName="solidBrushEditor" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding SelectedBrushType}" Value="{x:Static drawing:CommonBrushType.Resource}">
							<Setter TargetName="resourceBrushEditor" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding SelectedBrushType}" Value="{x:Static drawing:CommonBrushType.MaterialDesign}">
							<Setter TargetName="materialDesignColorEditor" Property="Visibility" Value="Visible" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:ResourceBrushEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ResourceBrushEditorControl">
					<StackPanel Orientation="Vertical">
						<ListBox Height="100" Name="resourceList" Grid.Row="1" Margin="0,4,0,0" SelectedItem="{Binding Resource}" ItemsSource="{Binding ResourceSelector.Resources}" HorizontalContentAlignment="Stretch" BorderThickness="1" >
							<ListBox.ItemTemplate>
								<DataTemplate>
									<Grid Margin="12,0,12,0">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="100" />
										</Grid.ColumnDefinitions>

										<TextBlock Grid.Column="1" Text="{Binding Name,Mode=OneTime}" VerticalAlignment="Center" />
										<ContentPresenter Grid.Column="2" Content="{Binding Value,Mode=OneTime}" Style="{DynamicResource ComplexResourcePreview}" />
									</Grid>
								</DataTemplate>
							</ListBox.ItemTemplate>
						</ListBox>
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="local:SolidBrushEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:SolidBrushEditorControl">
					<!--<TabControl Margin="0,4,0,0">
						<TabItem>
							<TabItem.Header>
								<local:PropertyPresenter Label="{x:Static prop:Resources.ColorEditorTabLabel}"/>
							</TabItem.Header>-->
					<StackPanel Orientation="Vertical">
						<local:PropertyPresenter x:Name="colorSpacePresenter" Label="{x:Static prop:Resources.ColorSpace}" ShowPropertyButton="false">
							<ComboBox Name="colorSpacePicker" ItemsSource="{Binding Solid.ColorSpaces}"
								SelectedItem="{Binding Solid.ColorSpace, Mode=OneTime}" VerticalContentAlignment="Center"
								AutomationProperties.Name="{x:Static prop:Resources.ColorSpace}"
								AutomationProperties.HelpText="{x:Static prop:Resources.ColorSpace}" ToolTip="{x:Static prop:Resources.ColorSpace}"/>
						</local:PropertyPresenter>
						<Grid VerticalAlignment="Top" Margin="0,6,0,0" MinHeight="180">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" MinWidth="150"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<local:ShadeEditorControl x:Name="shadeChooser"
									Shade="{Binding Path=Solid.Shade, Mode=TwoWay}"
									HueColor="{Binding Path=Solid.HueColor, Mode=OneWay}"
									Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
									Margin="0,6,0,1" Panel.ZIndex="1"/>
								<local:HueEditorControl
									x:Name="hueChooser" HueColor="{Binding Path=Solid.HueColor, Mode=TwoWay}"
									Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="1,6,3,1" Panel.ZIndex="0" Focusable="False"/>
								<local:CurrentColorEditorControl
									Color="{Binding Path=Solid.Color, Mode=TwoWay}"
									InitialColor="{Binding Solid.InitialColor}"
									LastColor="{Binding Solid.LastColor}"
									Grid.Column="0" Grid.Row="1" HorizontalAlignment="Stretch" Height="20"
									Margin="0,0,0,0" Panel.ZIndex="0" Focusable="False"/>
							</Grid>
							<local:ColorComponentsEditorControl x:Name="componentEditor"
								Color="{Binding Path=Solid.Color, Mode=TwoWay}"
								HueColor="{Binding Path=Solid.HueColor, Mode=TwoWay}"
								Grid.Column="1" Grid.Row="1" Grid.RowSpan="2"
								VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0,4,0,0" Focusable="False"/>
						</Grid>
					</StackPanel>
						<!--</TabItem>
						<TabItem>
							<TabItem.Header>
								<Label>Color Resources</Label>
							</TabItem.Header>
						</TabItem>
					</TabControl>-->
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Solid.ColorSpaces}" Value="{x:Null}">
							<Setter TargetName="colorSpacePresenter" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="HueSelectionGlyphBrush">#000000</SolidColorBrush>

	<Style TargetType="local:HueEditorControl">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:HueEditorControl">
					<Grid>
						<Rectangle Name="hueChooser" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="20" Stroke="Transparent" StrokeThickness="0">
							<Rectangle.Fill>
								<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
									<GradientStop Color="Red" Offset="0"/>
									<GradientStop Color="Yellow" Offset="0.167"/>
									<GradientStop Color="Lime" Offset="0.333"/>
									<GradientStop Color="Cyan" Offset="0.500"/>
									<GradientStop Color="Blue" Offset="0.667"/>
									<GradientStop Color="Magenta" Offset="0.833"/>
									<GradientStop Color="Red" Offset="1"/>
								</LinearGradientBrush>
							</Rectangle.Fill>
						</Rectangle>
						<Canvas Name="cursorCanvas" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="20" Panel.ZIndex="1" ClipToBounds="True">
							<Canvas Width="{Binding ActualWidth, ElementName=cursorCanvas}" Height="{Binding ActualHeight, ElementName=cursorCanvas}"
									Canvas.Top="{TemplateBinding CursorPosition}">
								<Canvas.RenderTransform><TranslateTransform X="0" Y="-4"/></Canvas.RenderTransform>
								<Polygon Points="0,0 5,5 0,10" Stroke="{DynamicResource HueSelectionGlyphBrush}" Fill="{DynamicResource HueSelectionGlyphBrush}"/>
								<Polygon Points="20,0 15,5 20,10" Stroke="{DynamicResource HueSelectionGlyphBrush}" Fill="{DynamicResource HueSelectionGlyphBrush}"/>
							</Canvas>
						</Canvas>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Color x:Key="ShadePickerCursorStrokeColor">#000000</Color>
	<Color x:Key="ShadePickerCursorOutlineColor">#FFFFFF</Color>

	<Style TargetType="local:ShadeEditorControl">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ShadeEditorControl">
					<Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
						<Rectangle Name="saturationLayer" HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" Stroke="Transparent" StrokeThickness="0" VerticalAlignment="Stretch">
							<Rectangle.Fill>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="White" Offset="0"/>
									<GradientStop Color="Red" Offset="1"/>
								</LinearGradientBrush>
							</Rectangle.Fill>
						</Rectangle>
						<Rectangle Name="brightnessLayer" HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" Stroke="Transparent" StrokeThickness="0" VerticalAlignment="Stretch" Panel.ZIndex="1">
							<Rectangle.Fill>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
									<GradientStop Color="#00000000" Offset="0"/>
									<GradientStop Color="Black" Offset="1"/>
								</LinearGradientBrush>
							</Rectangle.Fill>
						</Rectangle>
						<Canvas Name="cursor" HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" Panel.ZIndex="2" IsHitTestVisible="False">
							<Canvas.RenderTransform><TranslateTransform X="-6" Y="-6"/></Canvas.RenderTransform>
							<Rectangle IsHitTestVisible="False" Width="12" Height="12" StrokeThickness="0"
									Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CursorPosition.X}"
									Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CursorPosition.Y}">
								<Rectangle.Fill>
									<RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5">
										<RadialGradientBrush.GradientStops>
											<GradientStop Offset="0" Color="Transparent"/>
											<GradientStop Offset="0.5" Color="Transparent"/>
											<GradientStop Offset="0.5" Color="{DynamicResource ShadePickerCursorOutlineColor}"/>
											<GradientStop Offset="0.67" Color="{DynamicResource ShadePickerCursorOutlineColor}"/>
											<GradientStop Offset="0.67" Color="{DynamicResource ShadePickerCursorStrokeColor}"/>
											<GradientStop Offset="0.83" Color="{DynamicResource ShadePickerCursorStrokeColor}"/>
											<GradientStop Offset="0.83" Color="{DynamicResource ShadePickerCursorOutlineColor}"/>
											<GradientStop Offset="1" Color="{DynamicResource ShadePickerCursorOutlineColor}"/>
											<GradientStop Offset="1" Color="Transparent"/>
										</RadialGradientBrush.GradientStops>
									</RadialGradientBrush>
								</Rectangle.Fill>
							</Rectangle>
						</Canvas>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:ColorComponentsEditorControl">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu Placement="Bottom">
					<MenuItem Name="hlsMenuItem" Header="{x:Static prop:Resources.HLS}" ToolTip="{x:Static prop:Resources.HueLightnessSaturation}" AutomationProperties.HelpText="{x:Static prop:Resources.HueLightnessSaturation}"/>
					<MenuItem Name="hsbMenuItem" Header="{x:Static prop:Resources.HSB}" ToolTip="{x:Static prop:Resources.HueSaturationBrightness}" AutomationProperties.HelpText="{x:Static prop:Resources.HueSaturationBrightness}"/>
					<MenuItem Name="rgbMenuItem" Header="{x:Static prop:Resources.RGB}" ToolTip="{x:Static prop:Resources.RedGreenBlue}" AutomationProperties.HelpText="{x:Static prop:Resources.RedGreenBlue}"/>
					<MenuItem Name="cmykMenuItem" Header="{x:Static prop:Resources.CMYK}" ToolTip="{x:Static prop:Resources.CyanMagentaYellowBlack}" AutomationProperties.HelpText="{x:Static prop:Resources.CyanMagentaYellowBlack}"/>
				</ContextMenu>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ColorComponentsEditorControl">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						
						<Grid x:Name="hlsPane" Visibility="Collapsed" Grid.Row="0" Grid.Column="0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="23"/>
								<ColumnDefinition Width="77"/>
							</Grid.ColumnDefinitions>
							
							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="0" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
									ToolTip="{x:Static prop:Resources.Hue}" AutomationProperties.Name="{x:Static prop:Resources.Hue}" AutomationProperties.HelpText="{x:Static prop:Resources.Hue}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.HueInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="hueEntry"
								HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0"
								AutomationProperties.Name="{x:Static prop:Resources.Hue}" AutomationProperties.HelpText="{x:Static prop:Resources.Hue}" ToolTip="{x:Static prop:Resources.Hue}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Hue, Converter={local:DoubleToAngleConverter}, Mode=TwoWay}" Unit="°">
								<local:ColorComponentBox.GradientBrush>
									<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
										<GradientStop Color="Red" Offset="0"/>
										<GradientStop Color="Yellow" Offset="0.167"/>
										<GradientStop Color="Lime" Offset="0.333"/>
										<GradientStop Color="Cyan" Offset="0.500"/>
										<GradientStop Color="Blue" Offset="0.667"/>
										<GradientStop Color="Magenta" Offset="0.833"/>
										<GradientStop Color="Red" Offset="1"/>
									</LinearGradientBrush>
								</local:ColorComponentBox.GradientBrush>
							</local:ColorComponentBox>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="1" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
									ToolTip="{x:Static prop:Resources.Lightness}" AutomationProperties.Name="{x:Static prop:Resources.Lightness}" AutomationProperties.HelpText="{x:Static prop:Resources.Lightness}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.LightnessInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="lightnessEntry"
								AutomationProperties.Name="{x:Static prop:Resources.Lightness}" AutomationProperties.HelpText="{x:Static prop:Resources.Lightness}" ToolTip="{x:Static prop:Resources.Lightness}"
								HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="1"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Lightness, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToLightnessBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="2" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Saturation}" AutomationProperties.HelpText="{x:Static prop:Resources.Saturation}" ToolTip="{x:Static prop:Resources.Saturation}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.SaturationInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="saturationEntryHLS" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="2"
								AutomationProperties.Name="{x:Static prop:Resources.Saturation}" AutomationProperties.HelpText="{x:Static prop:Resources.Saturation}" ToolTip="{x:Static prop:Resources.Saturation}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Saturation, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToSaturationBrushConverter}}"/>

							<Label Content="{x:Static prop:Resources.AlphaInitial}" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"/>
							<local:ColorComponentBox x:Name="alphaEntryHLS" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=A, Converter={local:ByteToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToAlphaBrushConverter}}"/>
						</Grid>
						
						<Grid x:Name="hsbPane" Visibility="Collapsed" Grid.Row="0" Grid.Column="0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="23"/>
								<ColumnDefinition Width="77"/>
							</Grid.ColumnDefinitions>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="0" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Hue}" AutomationProperties.HelpText="{x:Static prop:Resources.Hue}" ToolTip="{x:Static prop:Resources.Hue}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.HueInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="hsbHueEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0"
								AutomationProperties.Name="{x:Static prop:Resources.Hue}" AutomationProperties.HelpText="{x:Static prop:Resources.Hue}" ToolTip="{x:Static prop:Resources.Hue}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Hue, Converter={local:DoubleToAngleConverter}, Mode=TwoWay}" Unit="°">
								<local:ColorComponentBox.GradientBrush>
									<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
										<GradientStop Color="Red" Offset="0"/>
										<GradientStop Color="Yellow" Offset="0.167"/>
										<GradientStop Color="Lime" Offset="0.333"/>
										<GradientStop Color="Cyan" Offset="0.500"/>
										<GradientStop Color="Blue" Offset="0.667"/>
										<GradientStop Color="Magenta" Offset="0.833"/>
										<GradientStop Color="Red" Offset="1"/>
									</LinearGradientBrush>
								</local:ColorComponentBox.GradientBrush>
							</local:ColorComponentBox>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="1" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Saturation}" AutomationProperties.HelpText="{x:Static prop:Resources.Saturation}" ToolTip="{x:Static prop:Resources.Saturation}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.SaturationInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="saturationEntryHSB" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="1"
								AutomationProperties.Name="{x:Static prop:Resources.Saturation}" AutomationProperties.HelpText="{x:Static prop:Resources.Saturation}" ToolTip="{x:Static prop:Resources.Saturation}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Saturation, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToSaturationBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="2" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Brightness}" AutomationProperties.HelpText="{x:Static prop:Resources.Brightness}" ToolTip="{x:Static prop:Resources.Brightness}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.BrightnessInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="brightnessEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="2"
								AutomationProperties.Name="{x:Static prop:Resources.Brightness}" AutomationProperties.HelpText="{x:Static prop:Resources.Brightness}" ToolTip="{x:Static prop:Resources.Brightness}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Brightness, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToBrightnessBrushConverter}}"/>

							<Label Content="{x:Static prop:Resources.AlphaInitial}" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"/>
							<local:ColorComponentBox x:Name="alphaEntryHSB" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=A, Converter={local:ByteToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToAlphaBrushConverter}}"/>
						</Grid>
						
						<Grid x:Name="rgbPane" Grid.Row="0" Grid.Column="0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="23"/>
								<ColumnDefinition Width="77"/>
							</Grid.ColumnDefinitions>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="0" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Red}" AutomationProperties.HelpText="{x:Static prop:Resources.Red}" ToolTip="{x:Static prop:Resources.Red}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.RedInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="redEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0"
								AutomationProperties.Name="{x:Static prop:Resources.Red}" AutomationProperties.HelpText="{x:Static prop:Resources.Red}" ToolTip="{x:Static prop:Resources.Red}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=R, Converter={local:ByteToDoubleConverter}, Mode=TwoWay}"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToRedBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="1" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Green}" AutomationProperties.HelpText="{x:Static prop:Resources.Green}" ToolTip="{x:Static prop:Resources.Green}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.GreenInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="greenEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="1"
								AutomationProperties.Name="{x:Static prop:Resources.Green}" AutomationProperties.HelpText="{x:Static prop:Resources.Green}" ToolTip="{x:Static prop:Resources.Green}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=G, Converter={local:ByteToDoubleConverter}, Mode=TwoWay}"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToGreenBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="2" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Blue}" AutomationProperties.HelpText="{x:Static prop:Resources.Blue}" ToolTip="{x:Static prop:Resources.Blue}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.BlueInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="blueEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="2"
								AutomationProperties.Name="{x:Static prop:Resources.Blue}" AutomationProperties.HelpText="{x:Static prop:Resources.Blue}" ToolTip="{x:Static prop:Resources.Blue}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=B, Converter={local:ByteToDoubleConverter}, Mode=TwoWay}"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToBlueBrushConverter}}"/>

							<Label Content="{x:Static prop:Resources.AlphaInitial}" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"/>
							<local:ColorComponentBox x:Name="alphaEntryRGB" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=A, Converter={local:ByteToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToAlphaBrushConverter}}"/>
						</Grid>
						
						<Grid x:Name="cmykPane" Visibility="Collapsed" Grid.Row="0" Grid.Column="0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
								<RowDefinition Height="Auto" MinHeight="22"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="23"/>
								<ColumnDefinition Width="77"/>
							</Grid.ColumnDefinitions>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="0" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Cyan}" AutomationProperties.HelpText="{x:Static prop:Resources.Cyan}" ToolTip="{x:Static prop:Resources.Cyan}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.CyanInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="cyanEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0"
								AutomationProperties.Name="{x:Static prop:Resources.Cyan}" AutomationProperties.HelpText="{x:Static prop:Resources.Cyan}" ToolTip="{x:Static prop:Resources.Cyan}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=C, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToCyanBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="1" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Magenta}" AutomationProperties.HelpText="{x:Static prop:Resources.Magenta}" ToolTip="{x:Static prop:Resources.Magenta}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.MagentaInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="magentaEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="1"
								AutomationProperties.Name="{x:Static prop:Resources.Magenta}" AutomationProperties.HelpText="{x:Static prop:Resources.Magenta}" ToolTip="{x:Static prop:Resources.Magenta}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=M, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToMagentaBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="2" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Yellow}" AutomationProperties.HelpText="{x:Static prop:Resources.Yellow}" ToolTip="{x:Static prop:Resources.Yellow}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.YellowInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="yellowEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="2"
								AutomationProperties.Name="{x:Static prop:Resources.Yellow}" AutomationProperties.HelpText="{x:Static prop:Resources.Yellow}" ToolTip="{x:Static prop:Resources.Yellow}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Y, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToYellowBrushConverter}}"/>

							<Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="3" Opacity="0" FocusVisualStyle="{x:Null}" Panel.ZIndex="1" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.Black}" AutomationProperties.HelpText="{x:Static prop:Resources.Black}" ToolTip="{x:Static prop:Resources.Black}"/>
							<Label HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="3" Margin="3,0,0,0">
								<TextBlock TextDecorations="Underline" Text="{x:Static prop:Resources.BlackInitial}"/>
							</Label>
							<local:ColorComponentBox x:Name="blackEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3"
								AutomationProperties.Name="{x:Static prop:Resources.Black}" AutomationProperties.HelpText="{x:Static prop:Resources.Black}" ToolTip="{x:Static prop:Resources.Black}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=K, Converter={local:DoubleToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToBlackBrushConverter}}"/>

							<Label Content="{x:Static prop:Resources.AlphaInitial}" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="4"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"/>
							<local:ColorComponentBox x:Name="alphaEntryCMYK" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Column="1" Grid.Row="4"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"
								Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=A, Converter={local:ByteToPercentageConverter}, Mode=TwoWay}" Unit="%"
								GradientBrush="{TemplateBinding Color, Converter={local:ColorComponentToAlphaBrushConverter}}"/>
						</Grid>
						
						<local:TextBoxEx x:Name="hexEntry" HorizontalContentAlignment="Left" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="77" Grid.Column="0" Grid.Row="2"
							AutomationProperties.Name="{x:Static prop:Resources.HexValue}" AutomationProperties.HelpText="{x:Static prop:Resources.HexValue}" ToolTip="{x:Static prop:Resources.HexValue}"
							Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color, Converter={local:HexColorConverter}, Mode=TwoWay}" FocusSelectsAll="True"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:ColorComponentBox">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ColorComponentBox">
					<Grid>
						<local:TextBoxEx x:Name="innerTextBox" FocusSelectsAll="True" VerticalContentAlignment="Center"
								 BitmapEffect="{TemplateBinding BitmapEffect}" BitmapEffectInput="{TemplateBinding BitmapEffectInput}"
								 CacheMode="{TemplateBinding CacheMode}" Clip="{TemplateBinding Clip}" ClipToBounds="{TemplateBinding ClipToBounds}" ContextMenu="{TemplateBinding ContextMenu}"
								 Cursor="{TemplateBinding Cursor}" DataContext="{TemplateBinding DataContext}" FlowDirection="{TemplateBinding FlowDirection}"
								 Focusable="True" FocusVisualStyle="{TemplateBinding FocusVisualStyle}" FontFamily="{TemplateBinding FontFamily}"
								 FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" ForceCursor="{TemplateBinding ForceCursor}"
								 Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								 IsHitTestVisible="{TemplateBinding IsHitTestVisible}" IsEnabled="{TemplateBinding IsEnabled}" IsManipulationEnabled="{TemplateBinding IsManipulationEnabled}"
								 IsTabStop="True" IsUndoEnabled="True" Margin="{TemplateBinding Margin}" MaxHeight="{TemplateBinding MaxHeight}" MaxWidth="{TemplateBinding MaxWidth}" MinHeight="{TemplateBinding MinHeight}"
								 MinWidth="{TemplateBinding MinWidth}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ToolTip="{TemplateBinding ToolTip}" TabIndex="{TemplateBinding TabIndex}"
								 Tag="{TemplateBinding Tag}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" Uid="{TemplateBinding Uid}" Grid.Row="0" Grid.Column="0" Panel.ZIndex="0"
								 AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.HelpText="{TemplateBinding AutomationProperties.Name}">
						</local:TextBoxEx>
						<local:BrushBoxControl x:Name="brushBoxControl" Visibility="Visible"
							Brush="{Binding Path=GradientBrush, RelativeSource={RelativeSource TemplatedParent}}"
							Height="3" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
							Grid.Row="0" Grid.Column="0" Panel.ZIndex="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="GradientBrush" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="brushBoxControl" Value="Hidden"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:CurrentColorEditorControl">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:CurrentColorEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="20"/>
						</Grid.ColumnDefinitions>
						<local:BrushBoxControl HorizontalAlignment="Stretch" Grid.Column="0" Panel.ZIndex="0" IsTabStop="False">
							<local:BrushBoxControl.Brush>
								<SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InitialColor, Converter={local:CommonColorToColorConverter}}"/>
							</local:BrushBoxControl.Brush>
						</local:BrushBoxControl>
						<Button x:Name="initialColorButton" HorizontalAlignment="Stretch" Grid.Column="0" Panel.ZIndex="1" Opacity="0" FocusVisualStyle="{x:Null}" IsTabStop="False"
								AutomationProperties.Name="{x:Static prop:Resources.InitialColor}" AutomationProperties.HelpText="{x:Static prop:Resources.InitialColor}" ToolTip="{x:Static prop:Resources.InitialColor}"/>
						<local:BrushBoxControl HorizontalAlignment="Stretch" Grid.Column="1" IsTabStop="False"
											   AutomationProperties.Name="{x:Static prop:Resources.CurrentColor}" AutomationProperties.HelpText="{x:Static prop:Resources.CurrentColor}" ToolTip="{x:Static prop:Resources.CurrentColor}">
							<local:BrushBoxControl.Brush>
								<SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color, Converter={local:CommonColorToColorConverter}}"/>
							</local:BrushBoxControl.Brush>
						</local:BrushBoxControl>
						<local:BrushBoxControl HorizontalAlignment="Stretch" Grid.Column="2" Margin="1,0,0,0" IsTabStop="False"
											   AutomationProperties.Name="{x:Static prop:Resources.LastColor}" AutomationProperties.HelpText="{x:Static prop:Resources.LastColor}" ToolTip="{x:Static prop:Resources.LastColor}">
							<local:BrushBoxControl.Brush>
								<SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LastColor, Converter={local:CommonColorToColorConverter}}"/>
							</local:BrushBoxControl.Brush>
						</local:BrushBoxControl>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignColorControlItem" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="RadioButton">
		<Setter Property="Background" Value="{DynamicResource ToggleItemBackgroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border Name="ButtonBorder" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
							BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="BorderBrush" TargetName="ButtonBorder" Value="{DynamicResource ToggleItemSelectedBorderBrush}"/>
							<Setter Property="Padding" TargetName="ButtonBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="ButtonBorder" Value="1"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" TargetName="ButtonBorder" Value="{DynamicResource ToggleItemMouseOverBorderBrush}" />
							<Setter Property="Padding" TargetName="ButtonBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="ButtonBorder" Value="1"/>
							<Setter Property="Background" TargetName="ButtonBorder" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="BorderBrush" TargetName="ButtonBorder" Value="{DynamicResource ToggleItemPressedBorderBrush}" />
							<Setter Property="Padding" TargetName="ButtonBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="ButtonBorder" Value="1"/>
							<Setter Property="Background" TargetName="ButtonBorder" Value="{DynamicResource ToggleItemPressedBackgroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="DarkeningBrush" Color="#40000000"/>

	<Style TargetType="local:MaterialDesignColorEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:MaterialDesignColorEditorControl">
					<Border BorderThickness="0" Padding="2,0,2,0" DataContext="{Binding MaterialDesign}">
						<StackPanel Orientation="Vertical">
							<Grid Margin="0,2,0,2"  Background="Transparent">
								<local:ChoiceControl x:Name="palettePicker" Background="Transparent"
									Grid.Column="0" Grid.Row="0" Panel.ZIndex="0" BorderThickness="0"
									ItemsSource="{Binding Palettes}"
									SelectedValue="{Binding ColorName}"
									SelectedValuePath="Name">
									<local:ChoiceControl.ItemTemplate>
										<DataTemplate>
											<RadioButton Style="{DynamicResource MaterialDesignColorControlItem}"
												ToolTip="{Binding Name}" AutomationProperties.Name="{Binding Name}" AutomationProperties.HelpText="{Binding Name}"
												GroupName="{Binding Name, RelativeSource={RelativeSource FindAncestor,AncestorType=local:ChoiceControl}, Mode=OneTime}">
												<Grid Margin="0">
													<local:BrushBoxControl>
														<local:BrushBoxControl.Brush>
															<SolidColorBrush Color="{Binding MainColor, Converter={local:CommonColorToColorConverter}}"/>
														</local:BrushBoxControl.Brush>
													</local:BrushBoxControl>
													<Border BorderBrush="{StaticResource DarkeningBrush}" BorderThickness="1" Grid.Column="0" Grid.Row="0" Panel.ZIndex="1"/>
												</Grid>
											</RadioButton>
										</DataTemplate>
									</local:ChoiceControl.ItemTemplate>
									<local:ChoiceControl.ItemsPanel>
										<ItemsPanelTemplate>
											<UniformGrid Columns="10" UseLayoutRounding="False"/>
										</ItemsPanelTemplate>
									</local:ChoiceControl.ItemsPanel>
								</local:ChoiceControl>
							</Grid>
							<TextBlock Name="colorLabel" Text="{Binding ColorName}" FontWeight="Bold" Focusable="False"/>
							<Grid Margin="0,2,0,2">
								<local:ChoiceControl x:Name="normalColorPicker" Background="Transparent"
									Grid.Column="0" Grid.Row="0" Panel.ZIndex="0" BorderThickness="0"
									ItemsSource="{Binding NormalColorScale}"
									SelectedValue="{Binding NormalColor}" SelectedValuePath="">
									<local:ChoiceControl.ItemTemplate>
										<DataTemplate>
											<RadioButton Style="{DynamicResource MaterialDesignColorControlItem}"
												BorderThickness="0"
												ToolTip="{Binding Label}" AutomationProperties.Name="{Binding Label}" AutomationProperties.HelpText="{Binding Label}"
												GroupName="MaterialDesignAccentOrNormal">
												<local:BrushBoxControl Label="{Binding Label}" FontSize="10"
																	   LightForegroundThreshold="{Binding Path=DataContext.NormalColorScriptureLightnessThreshold, ElementName=normalColorPicker}">
													<local:BrushBoxControl.Brush>
														<SolidColorBrush Color="{Binding Converter={local:CommonColorToColorConverter}}"/>
													</local:BrushBoxControl.Brush>
												</local:BrushBoxControl>
											</RadioButton>
										</DataTemplate>
									</local:ChoiceControl.ItemTemplate>
									<local:ChoiceControl.ItemsPanel>
										<ItemsPanelTemplate>
											<UniformGrid Columns="{Binding NormalColorScale.Count}" Height="25" UseLayoutRounding="False"/>
										</ItemsPanelTemplate>
									</local:ChoiceControl.ItemsPanel>
								</local:ChoiceControl>
								<Border BorderBrush="{StaticResource DarkeningBrush}" BorderThickness="1" Grid.Column="0" Grid.Row="0" Panel.ZIndex="1"/>
							</Grid>
							<Grid Margin="0,2,0,2" Visibility="{Binding AccentColorScale, Converter={local:HasItemsToVisibilityConverter}}">
								<local:ChoiceControl x:Name="accentColorPicker" Background="Transparent"
									Grid.Column="0" Grid.Row="0" Panel.ZIndex="0" BorderThickness="0"
									ItemsSource="{Binding AccentColorScale}"
									SelectedValue="{Binding AccentColor}" SelectedValuePath="">
									<local:ChoiceControl.ItemTemplate>
										<DataTemplate>
											<RadioButton Style="{DynamicResource MaterialDesignColorControlItem}"
												BorderThickness="0"
												ToolTip="{Binding Label}" AutomationProperties.Name="{Binding Label}" AutomationProperties.HelpText="{Binding Label}"
												GroupName="MaterialDesignAccentOrNormal">
												<local:BrushBoxControl Label="{Binding Label}" FontSize="10"
																	   LightForegroundThreshold="{Binding Path=DataContext.AccentColorScriptureLightnessThreshold, ElementName=accentColorPicker}">
													<local:BrushBoxControl.Brush>
														<SolidColorBrush Color="{Binding Converter={local:CommonColorToColorConverter}}"/>
													</local:BrushBoxControl.Brush>
												</local:BrushBoxControl>
											</RadioButton>
										</DataTemplate>
									</local:ChoiceControl.ItemTemplate>
									<local:ChoiceControl.ItemsPanel>
										<ItemsPanelTemplate>
											<UniformGrid Columns="{Binding AccentColorScale.Count}" Height="25" UseLayoutRounding="False"/>
										</ItemsPanelTemplate>
									</local:ChoiceControl.ItemsPanel>
								</local:ChoiceControl>
								<Border BorderBrush="{StaticResource DarkeningBrush}" BorderThickness="1" Grid.Column="0" Grid.Row="0" Panel.ZIndex="1"/>
							</Grid>
							<local:PropertyPresenter x:Name="alpha" Label="{x:Static prop:Resources.Alpha}" ShowPropertyButton="False"
								AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}">
								<local:ColorComponentBox x:Name="alphaEntry" HorizontalAlignment="Stretch" VerticalAlignment="Center"
									AutomationProperties.Name="{x:Static prop:Resources.Alpha}" AutomationProperties.HelpText="{x:Static prop:Resources.Alpha}" ToolTip="{x:Static prop:Resources.Alpha}"
									Value="{Binding Alpha, Converter={local:ByteToPercentageConverter}, Mode=TwoWay}" Unit="%"/>
							</local:PropertyPresenter>
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:BrushBoxControl">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:BrushBoxControl">
					<Grid>
						<Label HorizontalAlignment="Stretch" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
							   Content="{x:Static prop:Resources.NoBrush}" Visibility="{TemplateBinding NoBrushVisible}"
							   BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
							   Grid.Column="0" Grid.Row="0" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" Padding="0"/>
						<Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
								   Stroke="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="1"
								   Grid.Column="0" Grid.Row="0" Panel.ZIndex="0" Visibility="{Binding BrushVisible, RelativeSource={RelativeSource TemplatedParent}}"
								   Fill="{StaticResource CheckerBoard}" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
						<Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="0" Panel.ZIndex="1"
								   Stroke="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="1"
								   Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Brush}" Visibility="{TemplateBinding BrushVisible}"
								   Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
						<TextBlock Name="labelOutline" HorizontalAlignment="Center"  VerticalAlignment="Bottom"
								   Text="{Binding Label, RelativeSource={RelativeSource TemplatedParent}}"
								   Foreground="Transparent"
								   Grid.Column="0" Grid.Row="0" Panel.ZIndex="2" Visibility="{Binding BrushVisible, RelativeSource={RelativeSource TemplatedParent}}"
								   Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}">
							<TextBlock.Effect>
								<BlurEffect Radius="3"/>
							</TextBlock.Effect>
						</TextBlock>
						<TextBlock Name="label" HorizontalAlignment="Center"  VerticalAlignment="Bottom"
								   Text="{Binding Label, RelativeSource={RelativeSource TemplatedParent}}"
								   Grid.Column="0" Grid.Row="0" Panel.ZIndex="3" Visibility="{Binding BrushVisible, RelativeSource={RelativeSource TemplatedParent}}"
								   Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Value="Dark">
							<DataTrigger.Binding>
								<MultiBinding Converter="{local:BrushToDarknessConverter}">
									<Binding Path="Brush" RelativeSource="{RelativeSource Self}"/>
									<Binding Path="LightForegroundThreshold" RelativeSource="{RelativeSource Self}"/>
								</MultiBinding>
							</DataTrigger.Binding>
							<Setter TargetName="label" Property="Foreground" Value="#FFFFFFFF"/>
							<Setter TargetName="labelOutline" Property="Foreground" Value="Transparent"/>
						</DataTrigger>
						<DataTrigger Value="Light">
							<DataTrigger.Binding>
								<MultiBinding Converter="{local:BrushToDarknessConverter}">
									<Binding Path="Brush" RelativeSource="{RelativeSource Self}"/>
									<Binding Path="LightForegroundThreshold" RelativeSource="{RelativeSource Self}"/>
								</MultiBinding>
							</DataTrigger.Binding>
							<Setter TargetName="label" Property="Foreground" Value="#FF000000"/>
							<Setter TargetName="labelOutline" Property="Foreground" Value="Transparent"/>
						</DataTrigger>
						<DataTrigger Value="Unknown">
							<DataTrigger.Binding>
								<MultiBinding Converter="{local:BrushToDarknessConverter}">
									<Binding Path="Brush" RelativeSource="{RelativeSource Self}"/>
									<Binding Path="LightForegroundThreshold" RelativeSource="{RelativeSource Self}"/>
								</MultiBinding>
							</DataTrigger.Binding>
							<Setter TargetName="label" Property="Foreground" Value="#FF000000"/>
							<Setter TargetName="labelOutline" Property="Foreground" Value="#FFFFFFFF"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="NoBrushVisible" Value="Hidden"/>
		<Setter Property="BrushVisible" Value="Visible"/>
		<Style.Triggers>
			<Trigger Property="Brush" Value="{x:Null}">
				<Setter Property="NoBrushVisible" Value="Visible"/>
				<Setter Property="BrushVisible" Value="Hidden"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="local:CollectionEditor">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:CollectionEditor">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<TextBlock Text="{x:Static prop:Resources.CollectionValue}" Grid.Column="0" />
						<Button Name="launch" AutomationProperties.Name="{Binding Name}" AutomationProperties.HelpText="{x:Static prop:Resources.CollectionEditHelpText}" Content="{x:Static prop:Resources.Ellipsis}" MinWidth="20" Grid.Column="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="VariantButton" TargetType="Button">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="9" />
		<Setter Property="Height" Value="10" />
		<Setter Property="Width" Value="10" />
		<Setter Property="Foreground" Value="{DynamicResource PropertyButtonBorderBrush}" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource GenericVisualFocusStyle}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.Setters>
					<Setter Property="Background" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}" />
				</Trigger.Setters>
			</Trigger>
		</Style.Triggers>
	</Style>

	<local:InvokePropertyButtonCommand x:Key="InvokePropertyButtonCommand" />

	<Style TargetType="local:PropertyPresenter">
		<Setter Property="MinHeight" Value="24" />
		<Setter Property="VariantBackgroundBrush" Value="{DynamicResource PanelGroupSecondaryBackgroundBrush}" />
		<Setter Property="LineBrush" Value="{DynamicResource VariantLineBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:PropertyPresenter">
					<Border x:Name="propertyContainer" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Name="delveColumn" Width="Auto" />
								<ColumnDefinition Name="labelColumn" MinWidth="100" MaxWidth="180" Width="0.4*" />
								<ColumnDefinition MinWidth="134" Width="0.6*" />
								<ColumnDefinition Name="propertyButtonColumn" Width="12" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Name="variationRow" Height="Auto" />
								<RowDefinition Height="Auto" MinHeight="24" />
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<local:ButtonEx Name="addVariant" Grid.Column="0" Grid.Row="1" Margin="{TemplateBinding Padding,Converter={StaticResource NegativeThicknessConverter}}" Style="{StaticResource VariantButton}" Command="{Binding RequestCreateVariantCommand,Mode=OneTime}" ToolTip="{x:Static prop:Resources.AddVariant}" AutomationProperties.Name="{x:Static prop:Resources.AddVariant}">
								<local:ButtonEx.Visibility>
									<MultiBinding Converter="{StaticResource BoolsToVisibilityConverter}">
										<Binding Path="HasVariations" Mode="OneTime" />
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ShowVariants" />
										<Binding Path="IsEnabled" RelativeSource="{RelativeSource Self}" />
									</MultiBinding>
								</local:ButtonEx.Visibility>

								<Grid Width="6" Height="6" VerticalAlignment="Center" HorizontalAlignment="Center">
									<Line X1="0" X2="6" Y1="3" Y2="3" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" StrokeThickness="1" />
									<Line X1="3" X2="3" Y1="0" Y2="6" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" StrokeThickness="1" />
								</Grid>
							</local:ButtonEx>

							<Grid Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="0" Visibility="{Binding IsVariant,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter},FallbackValue=Collapsed}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<local:ButtonEx Name="removeVariant" Grid.Column="0" Command="{Binding RemoveVariationCommand,Mode=OneTime}" Style="{StaticResource VariantButton}" ToolTip="{x:Static prop:Resources.RemoveVariant}" AutomationProperties.Name="{x:Static prop:Resources.RemoveVariant}">
									<Grid RenderTransformOrigin="0.5,0.5" Width="6" Height="6" VerticalAlignment="Center" HorizontalAlignment="Center">
										<Grid.RenderTransform>
											<RotateTransform Angle="45" />
										</Grid.RenderTransform>

										<Line X1="0" X2="6" Y1="3" Y2="3" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" StrokeThickness="1" />
										<Line X1="3" X2="3" Y1="0" Y2="6" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" StrokeThickness="1" />
									</Grid>
								</local:ButtonEx>

								<ItemsControl Margin="5,2,0,2" Name="variationsList" Grid.Column="1" ItemsSource="{Binding Variation,Mode=OneTime}" Focusable="False">
									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<VirtualizingStackPanel Orientation="Horizontal" />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>
									<ItemsControl.ItemTemplate>
										<DataTemplate DataType="pe:PropertyVariationOption">
											<Border Background="{DynamicResource VariantBackgroundBrush}" MinHeight="14" Padding="5,0,5,0" Margin="0,0,2,0">
												<!-- We need to base this font size on some VS setting. !-->
												<TextBlock Foreground="{DynamicResource VariantForegroundBrush}" FontSize="{Binding FontSize,RelativeSource={RelativeSource FindAncestor,AncestorType=ItemsControl},Converter={StaticResource MultiplierConverter},ConverterParameter=0.83}" VerticalAlignment="Center">
													<TextBlock.Text>
														<MultiBinding StringFormat="{}{0}: {1}" Mode="OneTime">
															<Binding Path="Category" Mode="OneTime" />
															<Binding Path="Name" Mode="OneTime" />
														</MultiBinding>
													</TextBlock.Text>
												</TextBlock>
											</Border>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</Grid>

							<local:ToggleButtonEx x:Name="delveButton" Grid.Row="1" Grid.Column="0" Style="{DynamicResource StandaloneToggleStyle}" Width="11" Height="11" Visibility="{Binding HasItems,ElementName=subProperties,Converter={StaticResource BoolToVisibilityConverter}}" HorizontalContentAlignment="Left" />
							<TextBlock Name="Label" Margin="0,3,0,3" Grid.Row="1" Grid.Column="1" Text="{TemplateBinding Label}" ToolTip="{Binding Property.Description,Mode=OneTime}" VerticalAlignment="Center" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" />
							<ContentPresenter Grid.Row="1" Grid.RowSpan="2" Grid.Column="2" Margin="4,2,0,2" IsEnabled="{Binding Property.CanWrite}" MinHeight="20" />
							<local:PropertyButton x:Name="propertyButton"  Grid.Row="1" Grid.RowSpan="2" Grid.Column="3" ValueSource="{Binding ValueSource}" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" AutomationProperties.Name="{x:Static prop:Resources.PropertyButtonName}" />

							<ItemsControl Name="subProperties" Background="{DynamicResource PanelGroupSecondaryBackgroundBrush}" Margin="{TemplateBinding Padding,Converter={StaticResource NegativeThicknessConverter}}" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4" ItemsSource="{TemplateBinding ItemsSource}" ItemTemplate="{DynamicResource PropertyEditorTemplate}">
								<ItemsControl.Visibility>
									<MultiBinding Converter="{StaticResource BoolsToVisibilityConverter}">
										<Binding ElementName="delveButton" Path="IsChecked" />
										<Binding RelativeSource="{RelativeSource Self}" Path="HasItems" />
									</MultiBinding>
								</ItemsControl.Visibility>
							</ItemsControl>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Label" Value="{x:Null}">
							<Setter TargetName="labelColumn" Property="MinWidth" Value="0" />
							<Setter TargetName="labelColumn" Property="Width" Value="0" />
							<Setter TargetName="propertyButtonColumn" Property="Width" Value="0" />
						</Trigger>
						<Trigger Property="ShowPropertyButton" Value="False">
							<Setter TargetName="propertyButtonColumn" Property="Width" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSubProperty" Value="True">
				<Setter Property="Background" Value="{DynamicResource PanelGroupSecondaryBackgroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TabItem}">
		<Setter Property="Foreground" Value="{DynamicResource PanelForegroundBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="TextElement.Foreground" Value="{DynamicResource ToggleItemForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Border x:Name="grid" BorderThickness="1" Padding="4" BorderBrush="{DynamicResource ToggleItemBorderBrush}"
							Background="{DynamicResource ToggleItemBackgroundBrush}" TextElement.Foreground="{DynamicResource ToggleItemForegroundBrush}">
						<ContentPresenter x:Name="tabContent" ContentSource="Header"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource ToggleItemSelectedBorderBrush}"/>
							<Setter TargetName="grid" Property="Background" Value="{DynamicResource ToggleItemSelectedBackgroundBrush}"/>
							<Setter TargetName="grid" Property="TextElement.Foreground" Value="{DynamicResource ToggleItemSelectedForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource ToggleItemMouseOverBorderBrush}"/>
							<Setter TargetName="grid" Property="Background" Value="{DynamicResource ToggleItemMouseOverBackgroundBrush}"/>
							<Setter TargetName="grid" Property="TextElement.Foreground" Value="{DynamicResource ToggleItemMouseOverForegroundBrush}"/>
						</Trigger>
						<Trigger Property="Button.IsPressed" Value="True">
							<Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource ToggleItemPressedBorderBrush}"/>
							<Setter TargetName="grid" Property="Background" Value="{DynamicResource ToggleItemPressedBackgroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type TabControl}">
		<Setter Property="Foreground" Value="{DynamicResource PanelForegroundBrush}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabControl">
					<Grid UseLayoutRounding="True">
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<TabPanel IsItemsHost="True" Grid.Row="0" Panel.ZIndex="1" />
						<Border Grid.Row="1" Panel.ZIndex="0" BorderThickness="0,1,1,1" Padding="4"
							Background="{DynamicResource ToggleItemOuterBorderBrush}" BorderBrush="{DynamicResource ToggleItemOuterBorderBrush}">
							<ContentPresenter ContentSource="SelectedContent" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="Label">
		<Setter Property="Foreground" Value="{DynamicResource PanelForegroundBrush}"/>
	</Style>

	<Style TargetType="ListBox">
		<Setter Property="Background" Value="{DynamicResource ListBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ListBackgroundBrush}" />
	</Style>
	
	<Style TargetType="ListBoxItem">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="4,1"/>
		<Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource GenericVisualFocusStyle}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListItemMouseOverBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListItemMouseOverBorderBrush}"/>
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ListItemMouseOverForegroundBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListItemSelectedBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListItemSelectedBorderBrush}"/>
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ListItemSelectedForegroundBrush}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="MenuItem">
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="MenuItem">
					<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
						<Grid Margin="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition MinWidth="17" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
								<ColumnDefinition Width="14"/>
							</Grid.ColumnDefinitions>
							<ContentPresenter x:Name="Icon" Grid.Column="0" ContentSource="Icon" Content="{TemplateBinding Icon}" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
							<Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Grid.Column="0" Margin="4,0,6,0" Visibility="Hidden" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" VerticalAlignment="Center" />
							<ContentPresenter x:Name="menuHeaderContainer" Grid.Column="1" ContentSource="Header" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="0,2,0,2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" HorizontalAlignment="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
							<TextBlock x:Name="menuGestureText" Grid.Column="2" Margin="5,2,0,2" DockPanel.Dock="Right" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
							<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource ListItemHighlightForegroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ListItemHighlightBorderBrush}" />
				<Setter Property="Background" Value="{DynamicResource ListItemHighlightBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource ListItemDisabledForegroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="HeaderedMenuItem" BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
		<Setter Property="Padding" Value="21,0,0,0" />
	</Style>

	<Style TargetType="{x:Type ContextMenu}">
		<Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
		<Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
		<Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="{DynamicResource MenuPopupBackgroundBrush}" />
		<Setter Property="Grid.IsSharedSizeScope" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource MenuPopupBorderBrush}" />
		<Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<ScrollViewer CanContentScroll="True" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
								<ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</Border>
					</theme:SystemDropShadowChrome>
					
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding HasDropShadow,RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding AreGradientsAllowed,Source={x:Static local:HostEnvironment.Current}}" Value="True" />
							</MultiDataTrigger.Conditions>
							
							<Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="shadow" Property="Color" Value="{DynamicResource DropShadowBackgroundColor}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:HeaderedContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
		<Setter Property="Padding" Value="2,0,2,14" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:HeaderedContextMenu}">
					<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent">
						<Border x:Name="Border" Padding="0,2,0,4" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<StackPanel>
								<Label Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="13,3,12,2" Padding="0" Foreground="{TemplateBinding Foreground}" />
								<ItemsPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" KeyboardNavigation.DirectionalNavigation="Cycle" />
							</StackPanel>
						</Border>
					</theme:SystemDropShadowChrome>

					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding HasDropShadow,RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding AreGradientsAllowed,Source={x:Static local:HostEnvironment.Current}}" Value="True" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="shadow" Property="Color" Value="{DynamicResource DropShadowBackgroundColor}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyleSelector">
			<Setter.Value>
				<local:PropertyMenuItemContainerStyleSelector MenuItemStyle="{StaticResource HeaderedMenuItem}">
					<local:PropertyMenuItemContainerStyleSelector.SeparatorStyle>
						<Style TargetType="Separator" BasedOn="{StaticResource {x:Type Separator}}">
							<Setter Property="Margin" Value="4,2,0,2" />
							<Setter Property="Background" Value="{DynamicResource MenuSeparatorBrush}" />
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="Separator">
										<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</local:PropertyMenuItemContainerStyleSelector.SeparatorStyle>
				</local:PropertyMenuItemContainerStyleSelector>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ArrangeMenuItem" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
		<Setter Property="Header" Value="{Binding ArrangeMode,Mode=OneTime,Converter={StaticResource ArrangeLocalizer}}" />
		<Setter Property="IsCheckable" Value="True" />
		<Setter Property="IsChecked" Value="{Binding IsChecked,Mode=TwoWay}" />
	</Style>

	<Style x:Key="IconRepeatButton" TargetType="RepeatButton">
		<Setter Property="Height" Value="16" />
		<Setter Property="Width" Value="16" />
		<Setter Property="Background" Value="{DynamicResource IconButtonSimpleBackgroundBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource IconButtonForegroundBrush}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Rectangle VerticalAlignment="Center" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
						<Rectangle.Fill>
							<DrawingBrush Stretch="Uniform">
								<DrawingBrush.Drawing>
									<GeometryDrawing Brush="{Binding Foreground,RelativeSource={RelativeSource AncestorType=RepeatButton}}" Geometry="{Binding Content,RelativeSource={RelativeSource AncestorType=RepeatButton}}" />
								</DrawingBrush.Drawing>
							</DrawingBrush>
						</Rectangle.Fill>
					</Rectangle>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Assumed inline shown during selection !-->
	<Style x:Key="SpinnerButton" TargetType="RepeatButton" BasedOn="{StaticResource IconRepeatButton}">
		<Setter Property="Foreground" Value="{DynamicResource ListItemSelectedForegroundBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Height" Value="9" />
		<Setter Property="Width" Value="7" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<ContentPresenter x:Name="contentPresenter" Focusable="False" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource ListItemMouseOverForegroundBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource ListItemHighlightForegroundBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource ListItemDisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="IconButton" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource IconButtonSimpleBackgroundBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource IconButtonForegroundBrush}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Rectangle Height="16" Width="16" VerticalAlignment="Center">
						<Rectangle.Fill>
							<DrawingBrush Stretch="None">
								<DrawingBrush.Drawing>
									<GeometryDrawing Brush="{Binding Foreground,RelativeSource={RelativeSource AncestorType=Button}}" Geometry="{Binding Content,RelativeSource={RelativeSource AncestorType=Button}}" />
								</DrawingBrush.Drawing>
							</DrawingBrush>
						</Rectangle.Fill>
					</Rectangle>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SearchButtonBase" TargetType="Button" BasedOn="{StaticResource IconButton}">
		<Setter Property="Margin" Value="-1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource IconButtonMouseOverForegroundBrush}" />
							<Setter Property="Background" TargetName="border" Value="{DynamicResource SearchControlButtonMouseOverBackgroundBrush}" />
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SearchControlButtonMouseOverBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource IconButtonPressedForegroundBrush}" />
							<Setter Property="Background" TargetName="border" Value="{DynamicResource SearchControlButtonPressedBackgroundBrush}" />
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SearchControlButtonPressedBorderBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SearchButton" TargetType="Button" BasedOn="{StaticResource SearchButtonBase}">
		<Setter Property="Content" Value="{DynamicResource SearchLoopIcon}" />
	</Style>

	<Style x:Key="ClearButton" TargetType="Button" BasedOn="{StaticResource SearchButtonBase}">
		<Setter Property="Content" Value="{DynamicResource ClearSearchIcon}" />
	</Style>

	<Style TargetType="local:TextBoxEx">
		<Setter Property="Background" Value="{DynamicResource InputBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InputBorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource InputForegroundBrush}" />
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="ClearButtonStyle" Value="{StaticResource ClearButton}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TextBoxEx}">
					<Grid>
						<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<ContentPresenter Grid.Column="0" Name="hintContent" Margin="2,0,2,0" Visibility="Collapsed" ContentSource="Hint" />
								<ScrollViewer x:Name="PART_ContentHost" Grid.Column="0" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>

								<Button Name="PART_Clear" Grid.Column="1" Style="{TemplateBinding ClearButtonStyle}" Visibility="{TemplateBinding ShowClearButton,Converter={StaticResource BoolToVisibilityConverter}}" />
								<Button Name="PART_Submit" Grid.Column="1" Style="{TemplateBinding SubmitButtonStyle}" Visibility="Collapsed" />
							</Grid>
						</Border>
						<Popup Name="PART_CompletePopup" Placement="Bottom" StaysOpen="True" Focusable="False" Width="{Binding ElementName=border,Path=ActualWidth}">
							<ListBox Name="PART_CompleteList" Focusable="False" MaxHeight="200" ItemsSource="{TemplateBinding ItemsSource}" ItemTemplate="{TemplateBinding ItemTemplate}" />
						</Popup>
					</Grid>
						<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="border" Value="0.56"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="{x:Static system:String.Empty}" />
								<Condition Property="ShowClearButton" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Clear" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_Submit" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="{x:Null}" />
								<Condition Property="ShowClearButton" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Clear" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_Submit" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<Trigger Property="Text" Value="{x:Static system:String.Empty}">
							<Setter TargetName="hintContent" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="Text" Value="{x:Null}">
							<Setter TargetName="hintContent" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource InputMouseOverBorderBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource InputMouseOverBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="hintContent" Property="Visibility" Value="Collapsed" />
							<Setter Property="BorderBrush" Value="{DynamicResource InputMouseOverBorderBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource InputMouseOverBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
					<Condition Property="IsSelectionActive" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ValidationTextBox" TargetType="local:TextBoxEx" BasedOn="{StaticResource {x:Type local:TextBoxEx}}">
		<Setter	Property="Validation.ErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<DockPanel>
						<AdornedElementPlaceholder Name="adorned"  DockPanel.Dock="Top" />
						<Border DockPanel.Dock="Bottom" Background="{DynamicResource ToolTipBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource ToolTipBorderBrush}">
							<ContentPresenter Margin="7,4,7,4" TextElement.Foreground="{DynamicResource ToolTipForegroundBrush}" Content="{Binding ElementName=adorned,Path=AdornedElement.(Validation.Errors)/ErrorContent}" />
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<local:NumericTemplateSelector x:Key="NumericTemplateSelector">
		<local:NumericTemplateSelector.FloatingTemplate>
			<DataTemplate DataType="vm:FloatingPropertyViewModel">
				<local:DoubleUpDownControl Value="{Binding Value}" IsEnabled="{Binding IsInputEnabled}" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" />
			</DataTemplate>
		</local:NumericTemplateSelector.FloatingTemplate>
		<local:NumericTemplateSelector.IntegerTemplate>
			<DataTemplate DataType="vm:IntegerPropertyViewModel">
				<local:IntegerUpDownControl Value="{Binding Value}" IsEnabled="{Binding IsInputEnabled}" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" />
			</DataTemplate>
		</local:NumericTemplateSelector.IntegerTemplate>
		<local:NumericTemplateSelector.ByteTemplate>
			<DataTemplate DataType="vm:BytePropertyViewModel">
				<local:ByteUpDownControl Value="{Binding Value}" IsEnabled="{Binding IsInputEnabled}" AutomationProperties.LabeledBy="{TemplateBinding AutomationProperties.LabeledBy}" />
			</DataTemplate>
		</local:NumericTemplateSelector.ByteTemplate>
	</local:NumericTemplateSelector>

	<Style TargetType="local:NumericEditorControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:NumericEditorControl">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<ContentPresenter Grid.Column="0" Content="{Binding}" ContentTemplateSelector="{StaticResource NumericTemplateSelector}" AutomationProperties.Name="{Binding Property.Name,Mode=OneTime}" />
						<local:ComboBoxEx Grid.Column="1" Visibility="{Binding HasInputModes,Mode=OneTime,Converter={StaticResource BoolToVisibilityConverter}}" EnableSubmit="False" IsEnabled="{Binding Property.CanWrite,Mode=OneTime}" ItemsSource="{Binding InputModes,Mode=OneTime}" SelectedItem="{Binding InputMode,Mode=TwoWay}" DisplayMemberPath="Identifier">
							<local:ComboBoxEx.ItemContainerStyle>
								<Style TargetType="ComboBoxItem">
									<Setter Property="AutomationProperties.Name" Value="{Binding Identifier,Mode=OneTime}" />
								</Style>
							</local:ComboBoxEx.ItemContainerStyle>
						</local:ComboBoxEx>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="local:IntegerUpDownControl" BasedOn="{StaticResource {x:Type local:TextBoxEx}}">
		<Setter Property="FocusSelectsAll" Value="True" />
	</Style>

	<Style TargetType="local:DoubleUpDownControl" BasedOn="{StaticResource {x:Type local:TextBoxEx}}">
		<Setter Property="FocusSelectsAll" Value="True" />
	</Style>

	<Style TargetType="local:ByteUpDownControl" BasedOn="{StaticResource {x:Type local:TextBoxEx}}">
		<Setter Property="FocusSelectsAll" Value="True" />
	</Style>

	<Style x:Key="SearchTextBox" TargetType="local:TextBoxEx" BasedOn="{StaticResource {x:Type local:TextBoxEx}}">
		<Setter Property="ShowClearButton" Value="True" />
		<Setter Property="SubmitButtonStyle" Value="{StaticResource SearchButton}" />
		<Setter Property="Background" Value="{DynamicResource SearchControlBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SearchControlBorderBrush}" />
		<Setter Property="HintTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}" Foreground="{DynamicResource SearchControlWatermarkBrush}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SearchControlActiveBackgroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SearchControlActiveBorderBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource SearchControlActiveForegroundBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="Background" Value="{DynamicResource SearchControlActiveBackgroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SearchControlActiveBorderBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource SearchControlActiveForegroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="PropertySearchTextBox" TargetType="local:TextBoxEx" BasedOn="{StaticResource SearchTextBox}">
		<Setter Property="Margin" Value="4,1,4,2" />
		<Setter Property="Height" Value="18" />
	</Style>

	<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="19" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<Border Grid.Column="0" Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
							<Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}">
								<Path.RenderTransform>
									<RotateTransform Angle="135" CenterY="3" CenterX="3"/>
								</Path.RenderTransform>
							</Path>
						</Border>

						<ContentPresenter Grid.Column="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="RenderTransform" TargetName="ExpandPath">
								<Setter.Value>
									<RotateTransform Angle="180" CenterY="3" CenterX="3"/>
								</Setter.Value>
							</Setter>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsChecked" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="StandaloneToggleStyle" TargetType="ToggleButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
						<Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}">
							<Path.RenderTransform>
								<RotateTransform Angle="135" CenterY="3" CenterX="3"/>
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="RenderTransform" TargetName="ExpandPath">
								<Setter.Value>
									<RotateTransform Angle="180" CenterY="3" CenterX="3"/>
								</Setter.Value>
							</Setter>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsChecked" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<local:MultiplyMarginConverter x:Key="MultiplyMarginConverter" />

	<Style x:Key="SelectionTreeViewItem" TargetType="{x:Type local:TreeViewItemEx}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style BasedOn="{StaticResource GenericVisualFocusStyle}" TargetType="Control">
					<Setter Property="Margin" Value="0" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Padding" Value="4,2,4,2" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ChildMargin" Value="19,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TreeViewItemEx}">
					<StackPanel Orientation="Vertical">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<Grid MinHeight="18">
								<Grid.Margin>
									<MultiBinding Converter="{StaticResource MultiplyMarginConverter}">
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ChildMargin" />
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="IndentLevel" />
									</MultiBinding>
								</Grid.Margin>
								<Grid.ColumnDefinitions>
									<ColumnDefinition MinWidth="19" Width="Auto"/>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>

								<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
								<ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</Border>
						
						<ItemsPresenter x:Name="ItemsHost" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOverItem" Value="True">
				<Setter Property="Background" Value="{DynamicResource ListItemHighlightBackgroundBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ListItemHighlightForegroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ListItemHighlightBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="HasItems" Value="False" />
				</MultiTrigger.Conditions>

				<Setter Property="Background" Value="{DynamicResource ListItemSelectedBackgroundBrush}"/>
				<Setter Property="Foreground" Value="{DynamicResource ListItemSelectedForegroundBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource ListItemSelectedBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="HasItems" Value="True">
				<Setter Property="IsSelectable" Value="False" />
			</Trigger>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="AutoExpandSelectionTreeViewItem" TargetType="local:TreeViewItemEx" BasedOn="{StaticResource SelectionTreeViewItem}">
		<Setter Property="IsExpanded" Value="True" />
	</Style>

	<Style x:Key="SelectionTreeView" TargetType="local:TreeViewEx">
		<Setter Property="ItemContainerStyle" Value="{StaticResource SelectionTreeViewItem}" />
		<Setter Property="Background" Value="{DynamicResource ListBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ListBackgroundBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PanelGroupForegroundBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
	</Style>

	<Style x:Key="AutoExpandSelectionTreeView" TargetType="local:TreeViewEx" BasedOn="{StaticResource SelectionTreeView}">
		<Setter Property="ItemContainerStyle" Value="{StaticResource AutoExpandSelectionTreeViewItem}" />
	</Style>

	<Style x:Key="TypeTreeView" TargetType="local:TreeViewEx" BasedOn="{StaticResource SelectionTreeView}">
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<HierarchicalDataTemplate ItemsSource="{Binding Value,Mode=OneTime}">
					<HierarchicalDataTemplate.ItemTemplate>
						<HierarchicalDataTemplate ItemsSource="{Binding Value,Mode=OneTime}">
							<HierarchicalDataTemplate.ItemTemplate>
								<DataTemplate>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<!-- Icon -->
										<TextBlock Grid.Column="1" Margin="8,0,0,0" Text="{Binding Name,Mode=OneTime}" />
										<local:Spinner Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Right" Value="{Binding RelativeSource={RelativeSource AncestorType=local:TypeSelectorControl},Path=TypeLevel,Mode=TwoWay}" MinimumValue="1">
											<local:Spinner.Visibility>
												<MultiBinding Converter="{StaticResource BoolsToVisibilityConverter}">
													<Binding RelativeSource="{RelativeSource AncestorType=local:TreeViewItemEx}" Path="IsSelected" />
													<Binding RelativeSource="{RelativeSource AncestorType=local:TypeSelectorControl}" Path="ShowTypeLevel" />
												</MultiBinding>
											</local:Spinner.Visibility>
										</local:Spinner>
									</Grid>
								</DataTemplate>
							</HierarchicalDataTemplate.ItemTemplate>
							<HierarchicalDataTemplate.ItemContainerStyle>
								<Style TargetType="local:TreeViewItemEx" BasedOn="{StaticResource SelectionTreeViewItem}">
									<Setter Property="AutomationProperties.Name" Value="{Binding Name,Mode=OneTime}" />
								</Style>
							</HierarchicalDataTemplate.ItemContainerStyle>

							<StackPanel Orientation="Horizontal">
								<!-- Icon -->
								<TextBlock Text="{Binding Key}" Margin="8,0,0,0" />
							</StackPanel>
						</HierarchicalDataTemplate>
					</HierarchicalDataTemplate.ItemTemplate>

					<StackPanel Orientation="Horizontal">
						<!-- Icon -->
						<TextBlock Margin="8,0,0,0" Text="{Binding Key,Mode=OneTime}" />
					</StackPanel>
				</HierarchicalDataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="local:TreeViewItemEx" BasedOn="{StaticResource SelectionTreeViewItem}">
					<Setter Property="AutomationProperties.Name" Value="{Binding Key,Mode=OneTime}" />
				</Style>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Rectangle Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="BorderBrush" Value="{DynamicResource VS.Environment.ScrollBarBackgroundBrush}" />
		<Setter Property="BorderThickness" Value="4,0,4,0" />
		<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbBackgroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border x:Name="rectangle" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbMouseOverBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsDragging" Value="True">
				<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="BorderBrush" Value="{DynamicResource VS.Environment.ScrollBarBackgroundBrush}" />
		<Setter Property="BorderThickness" Value="0,4,0,4" />
		<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbBackgroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border x:Name="rectangle" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbMouseOverBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsDragging" Value="True">
				<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarBackgroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="ScrollBar" BasedOn="{StaticResource {x:Type ScrollBar}}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Background" Value="{DynamicResource VS.Environment.ScrollBarBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource VS.Environment.ScrollBarBorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="Bg" SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
						</Grid.RowDefinitions>
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Row="1"/>
						<RepeatButton x:Name="PART_LineUpButton" Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Background="{DynamicResource VS.Environment.ScrollBarArrowBackgroundBrush}">
							<Path x:Name="ArrowTop" Data="M0,5L9,5 9,4 8,4 8,3 7,3 7,2 6,2 6,1 5,1 5,0 4,0 4,1 3,1 3,2 2,2 2,3 1,3 1,4 0,4z" Fill="{DynamicResource VS.Environment.ScrollBarArrowGlyphBrush}" Margin="0" Stretch="None"/>
						</RepeatButton>
						<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarButton}" Background="{DynamicResource VS.Environment.ScrollBarArrowBackgroundBrush}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarButton}" Background="{DynamicResource VS.Environment.ScrollBarArrowBackgroundBrush}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
							</Track.Thumb>
						</Track>
						<RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
							<Path x:Name="ArrowBottom" Data="M0,0L9,0 9,1 8,1 8,2 8,2 7,2 7,3 6,3 6,4 5,4 5,5 4,5 4,4 3,4 3,3 2,3 2,2 1,2 1,1 0,1z" Fill="{DynamicResource VS.Environment.ScrollBarArrowGlyphBrush}" Margin="0" Stretch="None"/>
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource VS.Environment.ScrollBarArrowGlyphMouseOverBrush}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
								<Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource VS.Environment.ScrollBarArrowGlyphMouseOverBrush}"/>
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource VS.Environment.ScrollBarArrowDisabledBackgroundBrush}"/>
							<Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource VS.Environment.ScrollBarArrowDisabledBackgroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="Bg" SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
									<ColumnDefinition Width="0.00001*"/>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
								</Grid.ColumnDefinitions>
								<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1"/>
								<RepeatButton x:Name="PART_LineLeftButton" Grid.Column="0" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
									<Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{DynamicResource VS.Environment.ScrollBarArrowGlyphBrush}" Margin="3" Stretch="Uniform"/>
								</RepeatButton>
								<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
									</Track.Thumb>
								</Track>
								<RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
									<Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{DynamicResource VS.Environment.ScrollBarArrowGlyphBrush}" Margin="3" Stretch="Uniform"/>
								</RepeatButton>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource VS.Environment.ScrollBarThumbPressedBackgroundBrush}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource VS.Environment.ScrollBarArrowGlyphMouseOverBrush}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
										<Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource VS.Environment.ScrollBarArrowGlyphMouseOverBrush}"/>
								</MultiDataTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Fill" TargetName="ArrowLeft" Value="Transparent"/>
									<Setter Property="Fill" TargetName="ArrowRight" Value="Transparent"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type ScrollViewer}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid x:Name="Grid" Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Rectangle x:Name="Corner" Grid.Column="1" Fill="{TemplateBinding Background}" Grid.Row="1"/>
						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
						<ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
						<ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="EmptyCheckBoxFocusVisualSquare" TargetType="Control" BasedOn="{StaticResource GenericVisualFocusStyle}">
		<Setter Property="Margin" Value="-1" />
		<Setter Property="Width" Value="18" />
		<Setter Property="HorizontalAlignment" Value="Left" />
	</Style>

	<Style TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="4,1"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource GenericVisualFocusStyle}"/>
		<Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ListItemDisabledForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsHighlighted" Value="True">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListItemHighlightBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListItemHighlightBorderBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type local:ToggleButtonEx}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:ToggleButtonEx}">
					<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Border x:Name="splitBorder" BorderBrush="{DynamicResource ComboBoxButtonSeparatorBrush}" BorderThickness="1,0,0,0" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="12">
							<Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="IsMouseOverRemote" Value="True" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
								<Condition Binding="{Binding IsMouseOverRemote, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxBorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonBackgroundBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOverRemote, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxMouseOverBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxMouseOverBorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonMouseOverSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonMouseOverBackgroundBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOverRemote, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxMouseOverBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxMouseOverBorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonBackgroundBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxPressedBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxPressedBorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonPressedSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonPressedSeparatorBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxPressedBackgroundBrush}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxPressedBorderBrush}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonPressedSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonPressedSeparatorBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=splitBorder}" Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonMouseOverSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonMouseOverBackgroundBrush}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBoxDisabledBackgroundBrush}" />
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBoxDisabledBorderBrush}" />
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonSeparatorBrush}" />
							<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBoxButtonBackgroundBrush}" />
							<Setter TargetName="arrow" Property="Visibility" Value="Hidden" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom">
				<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}" BorderThickness="1" Background="{DynamicResource ComboBoxPopupBackgroundBrush}">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<local:ToggleButtonEx x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
			<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ComboBoxDisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="CaretBrush" Value="{DynamicResource ComboBoxForegroundBrush}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom">
				<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}" BorderThickness="1" Background="{DynamicResource ComboBoxPopupBackgroundBrush}">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<local:ToggleButtonEx x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
			<Border x:Name="border" Margin="{TemplateBinding BorderThickness}">
				<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="border" Value="0.56"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="toggleButton" Property="IsMouseOverRemote" Value="True" />
			</Trigger>
			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="{DynamicResource ComboBoxDisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource GenericVisualFocusStyle}"/>
		<Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}"/>
		<Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="Padding" Value="6,2,5,2"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type local:ComboBoxEx}" BasedOn="{StaticResource {x:Type ComboBox}}">
	</Style>
</ResourceDictionary>
